<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>LABVIEW2LCIO: marlin::RootWriteEngine Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.html"><span>Namespaces</span></a></li>
    <li id="current"><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="files.html"><span>Files</span></a></li>
    <li><a href="dirs.html"><span>Directories</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li><a href="functions.html"><span>Data&nbsp;Fields</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="namespacemarlin.html">marlin</a>::<a class="el" href="classmarlin_1_1RootWriteEngine.html">RootWriteEngine</a></div>
<h1>marlin::RootWriteEngine Class Reference</h1><!-- doxytag: class="marlin::RootWriteEngine" -->Abstract base class of callback classes for the RootTreeWrite processor Abstract interface for a RootTreeWriter-engine.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RootWriteEngine_8hh-source.html">RootWriteEngine.hh</a>&gt;</code>
<p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#b9551f5a3323b6489adb42a7993ebb6f">RootWriteEngine</a> (RootTreeWriter *host)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">constructor  <a href="#b9551f5a3323b6489adb42a7993ebb6f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#e9bd7c517e368d121eb364049715e542">getEngineName</a> ()=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the name of the engine to the RootTreeWriter processor.  <a href="#e9bd7c517e368d121eb364049715e542"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#98171597757dfacdde11763d948dfe6c">registerParameters</a> ()=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to register steering parameters.  <a href="#98171597757dfacdde11763d948dfe6c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#a1fd821203fe59d00f0bc28b76904570">registerBranches</a> (TTree *)=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implement to register local variables to the output tree.  <a href="#a1fd821203fe59d00f0bc28b76904570"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#b8cb6e6006b8e5820b1f3959f5abb15a">fillVariables</a> (EVENT::LCEvent *evt)=0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implement this to extract the variables which you want to fill into the <em>ROOT</em> tree from the event.  <a href="#b8cb6e6006b8e5820b1f3959f5abb15a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5f541fb340518942be78e4ee69d87edf"></a><!-- doxytag: member="marlin::RootWriteEngine::~RootWriteEngine" ref="5f541fb340518942be78e4ee69d87edf" args="()" -->
virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#5f541fb340518942be78e4ee69d87edf">~RootWriteEngine</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="06de7544ff28c539d38a40ac05495862"></a><!-- doxytag: member="marlin::RootWriteEngine::_hostProcessor" ref="06de7544ff28c539d38a40ac05495862" args="" -->
RootTreeWriter &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classmarlin_1_1RootWriteEngine.html#06de7544ff28c539d38a40ac05495862">_hostProcessor</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Abstract base class of callback classes for the RootTreeWrite processor Abstract interface for a RootTreeWriter-engine. 
<p>
Implement an descendant of this class to add variables to the output tree of the RootTreeWriterProcessor. After that add the new <em>engine</em> to the list of writer engines in the RootTreeWriter processor 
<p>

<p>
Definition at line <a class="el" href="RootWriteEngine_8hh-source.html#l00029">29</a> of file <a class="el" href="RootWriteEngine_8hh-source.html">RootWriteEngine.hh</a>.<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="b9551f5a3323b6489adb42a7993ebb6f"></a><!-- doxytag: member="marlin::RootWriteEngine::RootWriteEngine" ref="b9551f5a3323b6489adb42a7993ebb6f" args="(RootTreeWriter *host)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">marlin::RootWriteEngine::RootWriteEngine           </td>
          <td>(</td>
          <td class="paramtype">RootTreeWriter *&nbsp;</td>
          <td class="paramname"> <em>host</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
constructor 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>host</em>&nbsp;</td><td>pointer to the RootTreeWriter processor the constructor of a derived class must pass this pointer to this base class e.g.<div class="fragment"><pre class="fragment">    /// SomeeWriteEngine( RootTreeWriter* host ):RootWriteEngine(host),
    ///                                          _engineName("SomeWriteEngine")
    /// {} </pre></div> </td></tr>
  </table>
</dl>

<p>
Definition at line <a class="el" href="RootWriteEngine_8hh-source.html#l00038">38</a> of file <a class="el" href="RootWriteEngine_8hh-source.html">RootWriteEngine.hh</a>.
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="b8cb6e6006b8e5820b1f3959f5abb15a"></a><!-- doxytag: member="marlin::RootWriteEngine::fillVariables" ref="b8cb6e6006b8e5820b1f3959f5abb15a" args="(EVENT::LCEvent *evt)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void marlin::RootWriteEngine::fillVariables           </td>
          <td>(</td>
          <td class="paramtype">EVENT::LCEvent *&nbsp;</td>
          <td class="paramname"> <em>evt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Implement this to extract the variables which you want to fill into the <em>ROOT</em> tree from the event. 
<p>
Write the value of the variables you want to add to the tree to the member variables, which you registered to the <em>ROOT</em> tree. The RootTreeWriter will call TTree::Fill() for you. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>evt</em>&nbsp;</td><td>the current event </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e9bd7c517e368d121eb364049715e542"></a><!-- doxytag: member="marlin::RootWriteEngine::getEngineName" ref="e9bd7c517e368d121eb364049715e542" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; marlin::RootWriteEngine::getEngineName           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the name of the engine to the RootTreeWriter processor. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>Must return a string with the engine name. </dd></dl>
<dl compact><dt><b><a class="el" href="todo.html#_todo000001">Todo:</a></b></dt><dd>fixme: should be const, but must be declared const in implementations too. Need to fix all existing engines?!? </dd></dl>

</div>
</div><p>
<a class="anchor" name="a1fd821203fe59d00f0bc28b76904570"></a><!-- doxytag: member="marlin::RootWriteEngine::registerBranches" ref="a1fd821203fe59d00f0bc28b76904570" args="(TTree *)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void marlin::RootWriteEngine::registerBranches           </td>
          <td>(</td>
          <td class="paramtype">TTree *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Implement to register local variables to the output tree. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pointer</em>&nbsp;</td><td>to the <em>ROOT</em> tree, which the RootTreeWriter processor fills at the end of each event. Usually the implementation looks like<div class="fragment"><pre class="fragment">    /// hostTree-&gt;Branch("variable",&amp;_variable" ,"variable/F"  );
    /// </pre></div>. But you can add any type of branch you like. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="98171597757dfacdde11763d948dfe6c"></a><!-- doxytag: member="marlin::RootWriteEngine::registerParameters" ref="98171597757dfacdde11763d948dfe6c" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void marlin::RootWriteEngine::registerParameters           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Used to register steering parameters. 
<p>
Implement to register <em>marlin</em> steering file parameters. Use <em>marlin</em> syntax to register parameters for the calling RootTreeWriter processor.<p>
use<div class="fragment"><pre class="fragment">    /// _hostProc.relayRegisterProcessorParameter(...)
    /// _hostProc.relayRegister...()
    /// </pre></div> instead of <em>marlin</em> processors<div class="fragment"><pre class="fragment">register...() </pre></div> methods 
</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RootWriteEngine_8hh-source.html">RootWriteEngine.hh</a></ul>
<hr size="1"><address style="align: right;"><small>Generated on Mon Apr 13 10:51:01 2015 for LABVIEW2LCIO by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
