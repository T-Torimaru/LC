<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>LABVIEW2LCIO: LabviewConverter2.cc Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.html"><span>Namespaces</span></a></li>
    <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="dirs.html"><span>Directories</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_330cadc8668be59e67ae1a1886a6974f.html">labview-converter</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_f0e961cab1890c976c599322c3c31b22.html">raw2lcio</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_aa2bd2dcedb92e13981c58919c4e6440.html">src</a></div>
<h1>LabviewConverter2.cc</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include "LabviewConverter2.hh"</span>
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="comment">//lcio</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include "IMPL/LCEventImpl.h"</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include "IMPL/LCRunHeaderImpl.h"</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include "UTIL/LCTime.h"</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include "IMPL/LCGenericObjectImpl.h"</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include "IMPL/LCCollectionVec.h"</span>
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="comment">//marlin</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;marlin/ProcessorMgr.h&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include "marlin/Exceptions.h"</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;locale&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include "LConverter.hh"</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "LabviewBlock2.hh"</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include "TempSensorBlock2.hh"</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include "TempSensorBlockOld.hh"</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">using namespace </span>std;
<a name="l00028"></a>00028 <span class="keyword">using namespace </span>lcio;
<a name="l00029"></a>00029 <span class="keyword">using namespace </span>CALICE;
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>marlin{
<a name="l00032"></a>00032     
<a name="l00033"></a>00033     
<a name="l00034"></a><a class="code" href="namespacemarlin.html#a29cb1a3c92dfa6b1328e4398702d2bf">00034</a>     <a class="code" href="classmarlin_1_1LabviewConverter2.html">LabviewConverter2</a> <a class="code" href="namespacemarlin.html#a29cb1a3c92dfa6b1328e4398702d2bf">aLabviewConverter2</a> ;
<a name="l00035"></a>00035     
<a name="l00036"></a>00036     
<a name="l00037"></a><a class="code" href="classmarlin_1_1LabviewConverter2.html#0e4343ff8f4b975319c80959bbb2ad1c">00037</a>     <a class="code" href="classmarlin_1_1LabviewConverter2.html#0e4343ff8f4b975319c80959bbb2ad1c">LabviewConverter2::LabviewConverter2</a>() : DataSourceProcessor(<span class="stringliteral">"LabviewConverter2"</span>)
<a name="l00038"></a>00038     {
<a name="l00039"></a>00039         
<a name="l00040"></a>00040         _description = <span class="stringliteral">"Reads the ascii ahcal labview raw data files. Make sure to not specify any LCIOInputFiles in the steering in order to read the Calice native raw data files ."</span> ;
<a name="l00041"></a>00041         
<a name="l00042"></a>00042         registerProcessorParameter( <span class="stringliteral">"Data"</span> ,
<a name="l00043"></a>00043                                    <span class="stringliteral">"Initial String to the ahcal data file. i.e. 'Run'"</span>  ,
<a name="l00044"></a>00044                                    <a class="code" href="classmarlin_1_1LabviewConverter2.html#ff509eddd373052f01c2f7f83d7e7774">_data</a> ,
<a name="l00045"></a>00045                                    std::string(<span class="stringliteral">"run270001.txt"</span>) ) ;
<a name="l00046"></a>00046         
<a name="l00047"></a>00047         registerProcessorParameter ( <span class="stringliteral">"Runnumber"</span>, <span class="stringliteral">"Runnumber"</span>, <a class="code" href="classmarlin_1_1LabviewConverter2.html#06585d551a36c6693b07ca45668745f6">_runNumber</a>, 270000);
<a name="l00048"></a>00048         
<a name="l00049"></a>00049         registerProcessorParameter ( <span class="stringliteral">"SlowControlLineNumber"</span>,
<a name="l00050"></a>00050                                     <span class="stringliteral">"First part of Slow Control Block, HBU 120 lines, EPT 1920 lines,  AHC2M New Labview output 0 lines"</span>,
<a name="l00051"></a>00051                                     <a class="code" href="classmarlin_1_1LabviewConverter2.html#4333ec4d8f885a07ba18df888949e8e4">_SlowControlLineNumber</a>, 0);
<a name="l00052"></a>00052         
<a name="l00053"></a>00053         registerProcessorParameter( <span class="stringliteral">"DetectorType"</span> ,
<a name="l00054"></a>00054                                    <span class="stringliteral">"Type name of the detector. Currently valid identifiers are: AHC2, AHC2M AEC"</span> ,
<a name="l00055"></a>00055                                    <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a>,
<a name="l00056"></a>00056                                    std::string(<span class="stringliteral">"AHC2M"</span>) ) ;
<a name="l00057"></a>00057         
<a name="l00058"></a>00058         
<a name="l00059"></a>00059         
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061     
<a name="l00062"></a><a class="code" href="classmarlin_1_1LabviewConverter2.html#219bd24c4b648f3ccb465cfd07317d75">00062</a>     <a class="code" href="classmarlin_1_1LabviewConverter2.html">LabviewConverter2</a>*  <a class="code" href="classmarlin_1_1LabviewConverter2.html#219bd24c4b648f3ccb465cfd07317d75">LabviewConverter2::newProcessor</a>() {
<a name="l00063"></a>00063         <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classmarlin_1_1LabviewConverter2.html">LabviewConverter2</a> ;
<a name="l00064"></a>00064     }
<a name="l00065"></a>00065     
<a name="l00066"></a><a class="code" href="classmarlin_1_1LabviewConverter2.html#2c51ee82a436d45a7a6bc923e3af462b">00066</a>     <span class="keywordtype">void</span> <a class="code" href="classmarlin_1_1LabviewConverter2.html#2c51ee82a436d45a7a6bc923e3af462b">LabviewConverter2::init</a>() {
<a name="l00067"></a>00067         <span class="comment">// printParameters() ;</span>
<a name="l00068"></a>00068         
<a name="l00069"></a>00069         <span class="comment">//_lConverter.init();</span>
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071     
<a name="l00072"></a>00072     
<a name="l00073"></a><a class="code" href="classmarlin_1_1LabviewConverter2.html#15b05f0606359ec8100c1682e899b965">00073</a>     <span class="keywordtype">void</span> <a class="code" href="classmarlin_1_1LabviewConverter2.html#15b05f0606359ec8100c1682e899b965">LabviewConverter2::readDataSource</a>( <span class="keywordtype">int</span> numEvents ) {
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         <span class="comment">/*</span>
<a name="l00076"></a>00076 <span class="comment">         if( _detectorTypeName == "AEC" ){</span>
<a name="l00077"></a>00077 <span class="comment">         std::setlocale(LC_ALL,"ja_JP");</span>
<a name="l00078"></a>00078 <span class="comment">         std::setlocale(LC_TIME, "ja_JP");</span>
<a name="l00079"></a>00079 <span class="comment">         }</span>
<a name="l00080"></a>00080 <span class="comment">         */</span>
<a name="l00081"></a>00081         
<a name="l00082"></a>00082         ifstream file_to_read;
<a name="l00083"></a>00083         file_to_read.open( <a class="code" href="classmarlin_1_1LabviewConverter2.html#ff509eddd373052f01c2f7f83d7e7774">_data</a>.c_str() );
<a name="l00084"></a>00084         
<a name="l00085"></a>00085         <span class="keywordflow">if</span> (file_to_read == NULL){
<a name="l00086"></a>00086             m_out(ERROR0) &lt;&lt; <span class="stringliteral">"Text input file not exists -- Check PATH in steering file!!!"</span> &lt;&lt; std:: endl;
<a name="l00087"></a>00087             <span class="keywordflow">return</span>;
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089         
<a name="l00090"></a>00090         <span class="keywordtype">int</span> rn = <a class="code" href="classmarlin_1_1LabviewConverter2.html#06585d551a36c6693b07ca45668745f6">_runNumber</a>;
<a name="l00091"></a>00091         
<a name="l00092"></a>00092         LCRunHeaderImpl* runHdr = <span class="keyword">new</span> LCRunHeaderImpl ;
<a name="l00093"></a>00093         runHdr-&gt;setRunNumber( rn ) ;
<a name="l00094"></a>00094         
<a name="l00095"></a>00095         string detName(<span class="stringliteral">"ahcal_next_generation"</span>)  ;
<a name="l00096"></a>00096         runHdr-&gt;setDetectorName( detName ) ;
<a name="l00097"></a>00097         
<a name="l00098"></a>00098         stringstream description ;
<a name="l00099"></a>00099         description &lt;&lt; <span class="stringliteral">" run: "</span> &lt;&lt; rn &lt;&lt;<span class="stringliteral">" is the raw data from Labview !"</span> ;
<a name="l00100"></a>00100         runHdr-&gt;setDescription( description.str()  ) ;
<a name="l00101"></a>00101         
<a name="l00102"></a>00102         ProcessorMgr::instance()-&gt;processRunHeader( runHdr  ) ;
<a name="l00103"></a>00103         
<a name="l00104"></a>00104         <span class="keywordtype">int</span> read[9];
<a name="l00105"></a>00105         <span class="comment">//int read[12];</span>
<a name="l00106"></a>00106         <span class="keywordtype">int</span> nCol = 9;
<a name="l00107"></a>00107         <span class="comment">//int nCol = 12;</span>
<a name="l00108"></a>00108         
<a name="l00109"></a>00109         <span class="keywordtype">int</span> currentCycleNr = -1;
<a name="l00110"></a>00110         <span class="keywordtype">int</span> lastCycleNr = -1;
<a name="l00111"></a>00111         <span class="keywordtype">bool</span> CycleNrChanged = <span class="keyword">false</span>;
<a name="l00112"></a>00112         
<a name="l00113"></a>00113         <span class="keywordtype">int</span> LcioEventNr = 0;
<a name="l00114"></a>00114         
<a name="l00115"></a>00115         map&lt; int, vector&lt;rawData&gt; &gt; rData;
<a name="l00116"></a>00116         
<a name="l00117"></a>00117         <a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html">rawData</a> blockData;
<a name="l00118"></a>00118         
<a name="l00119"></a>00119         string line;
<a name="l00120"></a>00120         
<a name="l00121"></a>00121         size_t foundDate;
<a name="l00122"></a>00122         string strDate (<span class="stringliteral">"Date"</span>);
<a name="l00123"></a>00123         
<a name="l00124"></a>00124         size_t foundUnixtime;
<a name="l00125"></a>00125         string strUnixtime (<span class="stringliteral">"Unixtime"</span>);
<a name="l00126"></a>00126         
<a name="l00127"></a>00127         
<a name="l00128"></a>00128         size_t foundTemperature = 0;
<a name="l00129"></a>00129         size_t foundTemperature2 = 0;
<a name="l00130"></a>00130         size_t foundTemperature3 = 0;
<a name="l00131"></a>00131         string strTemperature(<span class="stringliteral">"LDA:"</span>);
<a name="l00132"></a>00132         string strTemperature2(<span class="stringliteral">"# A5"</span>);
<a name="l00133"></a>00133         string strTemperature3(<span class="stringliteral">"# AM01"</span>);
<a name="l00134"></a>00134         <span class="keywordtype">int</span> TemperatureTimeRange[2] = {0,0};
<a name="l00135"></a>00135         <span class="keywordtype">bool</span> writeoutTemperature = <span class="keyword">true</span>;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         <span class="keywordtype">bool</span> newTemp = <span class="keyword">true</span>;
<a name="l00138"></a>00138         <span class="keywordtype">bool</span> oldTemp = <span class="keyword">false</span>;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         <span class="comment">//FIX ME ONLY FOR 15 LAYERS ?? VECTOR???</span>
<a name="l00141"></a>00141         string TSensor[15][10];
<a name="l00142"></a>00142         string lda[15], port[15];
<a name="l00143"></a>00143         
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <span class="keywordtype">int</span> index = 0;
<a name="l00146"></a>00146         
<a name="l00147"></a>00147         <span class="keywordtype">int</span> iEvtTime = 0;
<a name="l00148"></a>00148         
<a name="l00149"></a>00149         <span class="keywordtype">int</span> SlowControlLineCounter = 0; <span class="comment">//First 1920 lines in each CERN testbeam</span>
<a name="l00150"></a>00150         
<a name="l00151"></a>00151         <span class="comment">// **********************************************************</span>
<a name="l00152"></a>00152         <span class="comment">//        Processing data</span>
<a name="l00153"></a>00153         <span class="comment">//  build events according to the different BunchXID</span>
<a name="l00154"></a>00154         <span class="comment">//  within one CycleNr, and remove them,</span>
<a name="l00155"></a>00155         <span class="comment">//  until all collected data have been asigned to an event.</span>
<a name="l00156"></a>00156         <span class="comment">//  Then readin the next CycleNr raw data.</span>
<a name="l00157"></a>00157         <span class="comment">// **********************************************************</span>
<a name="l00158"></a>00158         <span class="keywordflow">while</span> (!file_to_read.eof()) {
<a name="l00159"></a>00159             
<a name="l00160"></a>00160             <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0; i&lt;nCol; i++) { read[i] = 0;}
<a name="l00161"></a>00161             
<a name="l00162"></a>00162             getline(file_to_read, line);
<a name="l00163"></a>00163             <span class="comment">//if(line[0] == '#') continue; //for comments</span>
<a name="l00164"></a>00164             
<a name="l00165"></a>00165             <span class="keywordflow">if</span>(line[0] == <span class="charliteral">'#'</span>){
<a name="l00166"></a>00166                 <span class="comment">//Read SlowControl block</span>
<a name="l00167"></a>00167                 <span class="comment">//Read first 1920 lines for EPT SlowControl, HBU is 120 lines.</span>
<a name="l00168"></a>00168                 <span class="keywordflow">if</span> (SlowControlLineCounter &lt; <a class="code" href="classmarlin_1_1LabviewConverter2.html#4333ec4d8f885a07ba18df888949e8e4">_SlowControlLineNumber</a> )
<a name="l00169"></a>00169                 {
<a name="l00170"></a>00170                     m_out(MESSAGE) &lt;&lt; line &lt;&lt;endl;
<a name="l00171"></a>00171                     <a class="code" href="classmarlin_1_1LabviewConverter2.html#2d469940ddeb71aef14db397ee547b51">SlowControl</a> &lt;&lt; line;
<a name="l00172"></a>00172                     SlowControlLineCounter++;
<a name="l00173"></a>00173                 }
<a name="l00174"></a>00174                 
<a name="l00175"></a>00175                 
<a name="l00176"></a>00176                 
<a name="l00177"></a>00177                 <span class="comment">//Read on Date/Time</span>
<a name="l00178"></a>00178                 foundDate = line.find(strDate);
<a name="l00179"></a>00179                 <span class="keywordflow">if</span> (foundDate!=string::npos) {
<a name="l00180"></a>00180                     <span class="comment">//line.erase (0,20);</span>
<a name="l00181"></a>00181                     <span class="comment">//size_t foundDate2 = line.find(".");</span>
<a name="l00182"></a>00182                     <span class="comment">//if (foundDate2!=string::npos) {</span>
<a name="l00183"></a>00183                     <span class="comment">//  line.erase (foundDate2,1);</span>
<a name="l00184"></a>00184                     <span class="comment">//}</span>
<a name="l00185"></a>00185                     m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" These events have been collected on date: "</span> &lt;&lt; line &lt;&lt;endl;
<a name="l00186"></a>00186                     
<a name="l00187"></a>00187                     <span class="comment">// convert this string into timestamp</span>
<a name="l00188"></a>00188                     <span class="keyword">struct </span>tm tm;
<a name="l00189"></a>00189                     <span class="comment">//if ( strptime(line.c_str(), "%d %m %Y %H:%M:%S", &amp;tm) != NULL ){</span>
<a name="l00190"></a>00190                     <span class="keywordflow">if</span>( <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> == <span class="stringliteral">"AHC2M"</span>){
<a name="l00191"></a>00191                         line.erase (0,20);
<a name="l00192"></a>00192                         <span class="keywordflow">if</span> ( strptime(line.c_str(), <span class="stringliteral">"%d. %b %Y %H:%M:%S"</span>, &amp;tm) != NULL ){
<a name="l00193"></a>00193                             time_t evtTimeDAQ;
<a name="l00194"></a>00194                             evtTimeDAQ = mktime(&amp;tm);
<a name="l00195"></a>00195                             iEvtTime = (int)evtTimeDAQ;
<a name="l00196"></a>00196                             m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" And the Unix UTC Timestamp  is "</span>  &lt;&lt; evtTimeDAQ &lt;&lt;endl;
<a name="l00197"></a>00197                         }
<a name="l00198"></a>00198                         <span class="keywordflow">else</span> {
<a name="l00199"></a>00199                             cout &lt;&lt;<span class="stringliteral">"Something wrong for the Timestamp in detector AHC2!"</span>&lt;&lt;endl;
<a name="l00200"></a>00200                         }
<a name="l00201"></a>00201                     }
<a name="l00202"></a>00202                     <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> == <span class="stringliteral">"AEC"</span>){
<a name="l00203"></a>00203                         line.erase (0,20);
<a name="l00204"></a>00204                         
<a name="l00205"></a>00205                         <span class="keywordflow">if</span> ( strptime(line.c_str(), <span class="stringliteral">"%d. %b %Y %H:%M:%S"</span>, &amp;tm) != NULL ){
<a name="l00206"></a>00206                             time_t evtTimeDAQ;
<a name="l00207"></a>00207                             evtTimeDAQ = mktime(&amp;tm);
<a name="l00208"></a>00208                             iEvtTime = (int)evtTimeDAQ;
<a name="l00209"></a>00209                             m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" And the Unix UTC Timestamp  is "</span>  &lt;&lt; evtTimeDAQ &lt;&lt;endl;
<a name="l00210"></a>00210                         }
<a name="l00211"></a>00211                         <span class="keywordflow">else</span> {
<a name="l00212"></a>00212                             cout &lt;&lt;<span class="stringliteral">"Something wrong for the Timestamp in detector AEC!"</span>&lt;&lt;endl;
<a name="l00213"></a>00213                             
<a name="l00214"></a>00214                         }
<a name="l00215"></a>00215                     }
<a name="l00216"></a>00216                     <span class="keywordflow">else</span> {
<a name="l00217"></a>00217                         cout &lt;&lt;<span class="stringliteral">"Something wrong for the Timestamp!"</span>&lt;&lt;endl;
<a name="l00218"></a>00218                         <span class="keywordflow">return</span>;
<a name="l00219"></a>00219                     }
<a name="l00220"></a>00220                 }
<a name="l00221"></a>00221                 
<a name="l00222"></a>00222                 foundUnixtime = line.find(strUnixtime);
<a name="l00223"></a>00223                 <span class="keywordflow">if</span> (foundUnixtime!=string::npos) {
<a name="l00224"></a>00224                     
<a name="l00225"></a>00225                     line.erase (0,12);
<a name="l00226"></a>00226                     stringstream(line)&gt;&gt;iEvtTime;
<a name="l00227"></a>00227                     
<a name="l00228"></a>00228                     m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" These events have been collected on date (Unix): "</span> &lt;&lt; line &lt;&lt;endl;
<a name="l00229"></a>00229                     
<a name="l00230"></a>00230                     
<a name="l00231"></a>00231                 }
<a name="l00232"></a>00232                 
<a name="l00233"></a>00233                 
<a name="l00234"></a>00234                 
<a name="l00235"></a>00235                 <span class="comment">//Read temperature</span>
<a name="l00236"></a>00236                 foundTemperature = line.find(strTemperature);
<a name="l00237"></a>00237                 
<a name="l00238"></a>00238                 <span class="keywordflow">if</span> (foundTemperature!=string::npos) {
<a name="l00239"></a>00239                   m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" Found Temperature New format "</span> &lt;&lt;endl;
<a name="l00240"></a>00240                     <span class="comment">//Lastone</span>
<a name="l00241"></a>00241                     TemperatureTimeRange[1] = TemperatureTimeRange[0];
<a name="l00242"></a>00242                     TemperatureTimeRange[0] = iEvtTime;
<a name="l00243"></a>00243                     <span class="keywordflow">if</span>(index == 14) index = 0;
<a name="l00244"></a>00244                     newTemp = <span class="keyword">true</span>;
<a name="l00245"></a>00245                     oldTemp = <span class="keyword">false</span>;
<a name="l00246"></a>00246                     writeoutTemperature = <span class="keyword">true</span>;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248                     <span class="keywordflow">if</span>(writeoutTemperature)
<a name="l00249"></a>00249                     {
<a name="l00250"></a>00250                         
<a name="l00251"></a>00251                         stringstream strstr;
<a name="l00252"></a>00252                         strstr.str(line);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                         <span class="keywordflow">if</span>( <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> == <span class="stringliteral">"AHC2M"</span>) {
<a name="l00255"></a>00255                             
<a name="l00256"></a>00256                             m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" And at this moment, the Temperatures are: "</span> &lt;&lt;endl;
<a name="l00257"></a>00257                             
<a name="l00258"></a>00258                             getline(strstr, TSensor[index][0], <span class="charliteral">'\t'</span>);
<a name="l00259"></a>00259                             lda[index] = TSensor[index][0].substr(7,1);
<a name="l00260"></a>00260                             port[index] = TSensor[index][0].substr(14,1);
<a name="l00261"></a>00261                             
<a name="l00262"></a>00262                             strstr &gt;&gt; TSensor[index][1] &gt;&gt; TSensor[index][2] &gt;&gt; TSensor[index][3] &gt;&gt; TSensor[index][4] &gt;&gt; TSensor[index][5] &gt;&gt; TSensor[index][6] &gt;&gt; TSensor[index][7] &gt;&gt; TSensor[index][8];
<a name="l00263"></a>00263                             m_out(MESSAGE) &lt;&lt; index &lt;&lt; <span class="stringliteral">" "</span> &lt;&lt; lda[index] &lt;&lt; <span class="stringliteral">" "</span> &lt;&lt; port[index] &lt;&lt;<span class="stringliteral">"   "</span> &lt;&lt;TSensor[index][1]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][2]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][3]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][4]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][5]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][6]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][7]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][8]&lt;&lt;endl;
<a name="l00264"></a>00264                             index++;
<a name="l00265"></a>00265                         }
<a name="l00266"></a>00266                         <span class="keywordflow">else</span>{
<a name="l00267"></a>00267                             cout &lt;&lt; <span class="stringliteral">"This detecot type: "</span>&lt;&lt; <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> &lt;&lt;<span class="stringliteral">" is not valid identifiers currently!\n"</span>
<a name="l00268"></a>00268                             &lt;&lt; <span class="stringliteral">"Currently valid identifiers are: AHC2M and AEC "</span>&lt;&lt; endl;
<a name="l00269"></a>00269                             <span class="keywordflow">return</span>;
<a name="l00270"></a>00270                         }
<a name="l00271"></a>00271                         
<a name="l00272"></a>00272                     }
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275                 <span class="comment">//Read temperature Old Serial</span>
<a name="l00276"></a>00276                 foundTemperature2 = line.find(strTemperature2);
<a name="l00277"></a>00277                 foundTemperature3 = line.find(strTemperature3);
<a name="l00278"></a>00278                 <span class="keywordflow">if</span> (foundTemperature2!=string::npos || foundTemperature3!=string::npos) {
<a name="l00279"></a>00279 
<a name="l00280"></a>00280                   m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" Found Temperature Old format "</span> &lt;&lt;endl;
<a name="l00281"></a>00281                   newTemp = <span class="keyword">false</span>;
<a name="l00282"></a>00282                   oldTemp = <span class="keyword">true</span>;
<a name="l00283"></a>00283                   <span class="keywordflow">if</span>(index &gt; 14) index = 0;
<a name="l00284"></a>00284                   <span class="comment">//Lastone</span>
<a name="l00285"></a>00285                   TemperatureTimeRange[1] = TemperatureTimeRange[0];
<a name="l00286"></a>00286                   TemperatureTimeRange[0] = iEvtTime;
<a name="l00287"></a>00287                   writeoutTemperature = <span class="keyword">true</span>;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289                   <span class="keywordflow">if</span>(writeoutTemperature)
<a name="l00290"></a>00290                     {
<a name="l00291"></a>00291                         
<a name="l00292"></a>00292                       stringstream strstr;
<a name="l00293"></a>00293                       strstr.str(line);
<a name="l00294"></a>00294                         
<a name="l00295"></a>00295                       <span class="keywordflow">if</span>( <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> == <span class="stringliteral">"AHC2M"</span>) {
<a name="l00296"></a>00296                             
<a name="l00297"></a>00297                         m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" And at this moment, the Temperatures are: "</span> &lt;&lt;endl;
<a name="l00298"></a>00298                             
<a name="l00299"></a>00299                                        strstr  &gt;&gt; TSensor[index][0] &gt;&gt; TSensor[index][1] &gt;&gt; TSensor[index][2] &gt;&gt; TSensor[index][3] &gt;&gt; TSensor[index][4] &gt;&gt; TSensor[index][5] &gt;&gt; TSensor[index][6] &gt;&gt; TSensor[index][7] &gt;&gt; TSensor[index][8] &gt;&gt; TSensor[index][9];
<a name="l00300"></a>00300                         m_out(MESSAGE) &lt;&lt; index &lt;&lt; <span class="stringliteral">" "</span> &lt;&lt; TSensor[index][0] &lt;&lt;<span class="stringliteral">"   "</span> &lt;&lt;TSensor[index][1] &lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][2]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][3]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][4]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][5]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][6]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][7]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][8]&lt;&lt;<span class="stringliteral">"   "</span>&lt;&lt;TSensor[index][9]&lt;&lt;endl;
<a name="l00301"></a>00301                         index++;
<a name="l00302"></a>00302                       }
<a name="l00303"></a>00303                       <span class="keywordflow">else</span>{
<a name="l00304"></a>00304                         cout &lt;&lt; <span class="stringliteral">"This detecot type: "</span>&lt;&lt; <a class="code" href="classmarlin_1_1LabviewConverter2.html#5ef2b97a454dc8677d4d51148641d48b">_detectorTypeName</a> &lt;&lt;<span class="stringliteral">" is not valid identifiers currently!\n"</span>
<a name="l00305"></a>00305                              &lt;&lt; <span class="stringliteral">"Currently valid identifiers are: AHC2M and AEC "</span>&lt;&lt; endl;
<a name="l00306"></a>00306                         <span class="keywordflow">return</span>;
<a name="l00307"></a>00307                       }
<a name="l00308"></a>00308                         
<a name="l00309"></a>00309                     }
<a name="l00310"></a>00310                 }
<a name="l00311"></a>00311                 
<a name="l00312"></a>00312                 <span class="keywordflow">continue</span>; <span class="comment">//for comments in the txt file start with "#"</span>
<a name="l00313"></a>00313             }
<a name="l00314"></a>00314             
<a name="l00315"></a>00315             <span class="keywordtype">int</span> index_max = index;
<a name="l00316"></a>00316             
<a name="l00317"></a>00317             <span class="comment">//  Sebastian Laurien : Email 5/23/2013 10:26 AM</span>
<a name="l00318"></a>00318             <span class="comment">//it is now</span>
<a name="l00319"></a>00319             <span class="comment">//Readoutcycle&gt;&gt;BXid&gt;&gt;ASICid&gt;&gt;memcell&gt;&gt;Ch&gt;&gt;TDC&gt;&gt;ADC&gt;&gt;HitBit&gt;&gt;GainBit;</span>
<a name="l00320"></a>00320             stringstream(line)&gt;&gt;read[0]&gt;&gt;read[1]&gt;&gt;read[2]&gt;&gt;read[3]&gt;&gt;read[4]&gt;&gt;read[5]&gt;&gt;read[6]&gt;&gt;read[7]&gt;&gt;read[8];
<a name="l00321"></a>00321             
<a name="l00322"></a>00322             <span class="comment">//if(read[0] == 0) continue;</span>
<a name="l00323"></a>00323             <span class="comment">//stringstream(line)&gt;&gt;read[0]&gt;&gt;read[1]&gt;&gt;read[2]&gt;&gt;read[3]&gt;&gt;read[4]&gt;&gt;read[5]&gt;&gt;read[6]&gt;&gt;read[7]&gt;&gt;read[8]&gt;&gt;read[9]&gt;&gt;read[10]&gt;&gt;read[11];</span>
<a name="l00324"></a>00324             <span class="comment">//0:BunchXID 1:CycleNr 2:ChipID2 3:Smt 4:EvtNr 5:chan 6:TDC 7:ADC (or 6:ADC_HG 7:ADC_LG) 8:Smt 9:Smt 10:Hit_Bit 11:Gain_Bit</span>
<a name="l00325"></a>00325             
<a name="l00326"></a>00326             <span class="comment">//In convert_root: &amp;BunchXID, &amp;CycleNr, &amp;ChipID2, &amp;EvtNr, &amp;chn, &amp;TDC, &amp;ADC, &amp;Hit_Bit, &amp;Gain_Bit</span>
<a name="l00327"></a>00327             
<a name="l00328"></a>00328             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#348ecb2f38bd810c2c42aadadabdb6d2">iCyNr</a> = read[0];
<a name="l00329"></a>00329             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#5dbec0e5a5bcf7665a331b9378ae2777">iBxID</a> = read[1];
<a name="l00330"></a>00330             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#a032d2168292baf0d207ff172ca096bf">iCpID</a> = read[2];
<a name="l00331"></a>00331             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#2719d6713c32f6792c1bf73a8e3fc10a">iEvNr</a> = read[3];
<a name="l00332"></a>00332             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#1f7b64aab7517b8ce51d77372c9c2fb0">iChan</a> = read[4];
<a name="l00333"></a>00333             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#045c70372c18618a590de5da547b5d5a">iTDC</a>  = read[5];
<a name="l00334"></a>00334             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#5e85dc8786687fd029c986cddd14ff47">iADC</a>  = read[6];
<a name="l00335"></a>00335             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#b16d7aa977d7317ba1b629c4c091d351">iHBit</a> = read[7];
<a name="l00336"></a>00336             blockData.<a class="code" href="structmarlin_1_1LabviewConverter2_1_1rawData.html#648d9fb2f53d0d23b265fc9b87be742b">iGBit</a> = read[8];
<a name="l00337"></a>00337             
<a name="l00338"></a>00338             <span class="comment">//Shaojun's order</span>
<a name="l00339"></a>00339             <span class="comment">/*</span>
<a name="l00340"></a>00340 <span class="comment">             blockData.iCyNr = read[1];</span>
<a name="l00341"></a>00341 <span class="comment">             blockData.iBxID = read[0];</span>
<a name="l00342"></a>00342 <span class="comment">             blockData.iCpID = read[2];</span>
<a name="l00343"></a>00343 <span class="comment">             blockData.iEvNr = read[4];</span>
<a name="l00344"></a>00344 <span class="comment">             blockData.iChan = read[5];</span>
<a name="l00345"></a>00345 <span class="comment">             blockData.iTDC  = read[7];</span>
<a name="l00346"></a>00346 <span class="comment">             blockData.iADC  = read[6];</span>
<a name="l00347"></a>00347 <span class="comment">             blockData.iHBit = read[10];</span>
<a name="l00348"></a>00348 <span class="comment">             blockData.iGBit = read[11];</span>
<a name="l00349"></a>00349 <span class="comment">             */</span>
<a name="l00350"></a>00350             
<a name="l00351"></a>00351             m_out(DEBUG4) &lt;&lt;<span class="stringliteral">"  BXID: "</span>&lt;&lt;read[0] &lt;&lt;<span class="stringliteral">" CycleNr: "</span>&lt;&lt;read[1] &lt;&lt;<span class="stringliteral">" ChipID: "</span>&lt;&lt;read[2]&lt;&lt;<span class="stringliteral">"  Channel: "</span> &lt;&lt;read[4] &lt;&lt; std::endl;
<a name="l00352"></a>00352             
<a name="l00353"></a>00353             currentCycleNr = read[0];
<a name="l00354"></a>00354             m_out(DEBUG4) &lt;&lt;<span class="stringliteral">"lastCycleNr "</span>  &lt;&lt; lastCycleNr &lt;&lt; <span class="stringliteral">" currentCycleNr "</span> &lt;&lt; currentCycleNr &lt;&lt; endl;
<a name="l00355"></a>00355             
<a name="l00356"></a>00356             <span class="keywordflow">if</span>( lastCycleNr != currentCycleNr )
<a name="l00357"></a>00357             {
<a name="l00358"></a>00358                 m_out(DEBUG4) &lt;&lt;<span class="stringliteral">"(lastCycleNr != currentCycleNr) : lastCycleNr: "</span>&lt;&lt; lastCycleNr&lt;&lt;<span class="stringliteral">"  currentCycleNr:"</span>&lt;&lt;currentCycleNr &lt;&lt; endl;
<a name="l00359"></a>00359                 CycleNrChanged = <span class="keyword">true</span>;
<a name="l00360"></a>00360                 lastCycleNr = currentCycleNr;
<a name="l00361"></a>00361                 
<a name="l00362"></a>00362                 <span class="keywordflow">if</span>( CycleNrChanged )
<a name="l00363"></a>00363                 {
<a name="l00364"></a>00364                     m_out(DEBUG4) &lt;&lt;<span class="stringliteral">" rData.size(): "</span>&lt;&lt;rData.size() &lt;&lt; endl;
<a name="l00365"></a>00365                     
<a name="l00366"></a>00366                     <span class="keywordflow">for</span>(  map&lt; <span class="keywordtype">int</span>, vector&lt;rawData&gt; &gt;::iterator it=rData.begin(); it!=rData.end();it++ )
<a name="l00367"></a>00367                     {
<a name="l00368"></a>00368                         
<a name="l00369"></a>00369                         <span class="comment">//m_out(MESSAGE)&lt;&lt; " ===== LabviewConverter2 processing Event "&lt;&lt; LcioEventNr &lt;&lt;"  ======" &lt;&lt; endl;</span>
<a name="l00370"></a>00370                         LCEventImpl*  evt = <span class="keyword">new</span> LCEventImpl() ;
<a name="l00371"></a>00371                         
<a name="l00372"></a>00372                         
<a name="l00373"></a>00373                         LCCollectionVec *colECAL = <span class="keyword">new</span> LCCollectionVec( LCIO::LCGENERICOBJECT );
<a name="l00374"></a>00374                         LCCollectionVec *colHCAL = <span class="keyword">new</span> LCCollectionVec( LCIO::LCGENERICOBJECT );
<a name="l00375"></a>00375                         
<a name="l00376"></a>00376                         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; it-&gt;second.size(); i++ )
<a name="l00377"></a>00377                         {
<a name="l00378"></a>00378                             <span class="keywordtype">int</span> iBxID = it-&gt;second.at(i).iBxID;
<a name="l00379"></a>00379                             <span class="keywordtype">int</span> iCyNr = it-&gt;second.at(i).iCyNr;
<a name="l00380"></a>00380                             <span class="keywordtype">int</span> iCpID = it-&gt;second.at(i).iCpID;
<a name="l00381"></a>00381                             <span class="keywordtype">int</span> iEvNr = it-&gt;second.at(i).iEvNr;
<a name="l00382"></a>00382                             <span class="keywordtype">int</span> iChan = it-&gt;second.at(i).iChan;
<a name="l00383"></a>00383                             <span class="keywordtype">int</span> iTDC  = it-&gt;second.at(i).iTDC;
<a name="l00384"></a>00384                             <span class="keywordtype">int</span> iADC  = it-&gt;second.at(i).iADC;
<a name="l00385"></a>00385                             <span class="keywordtype">int</span> iHBit = it-&gt;second.at(i).iHBit;
<a name="l00386"></a>00386                             <span class="keywordtype">int</span> iGBit = it-&gt;second.at(i).iGBit;
<a name="l00387"></a>00387                             
<a name="l00388"></a>00388                             
<a name="l00389"></a>00389                             <a class="code" href="classCALICE_1_1LabviewBlock2.html">LabviewBlock2</a> * lBlock = <span class="keyword">new</span> <a class="code" href="classCALICE_1_1LabviewBlock2.html">LabviewBlock2</a>(iCyNr, iBxID, iCpID, iEvNr, iChan,
<a name="l00390"></a>00390                                                                        iTDC, iADC, iHBit, iGBit);
<a name="l00391"></a>00391                             
<a name="l00392"></a>00392                             
<a name="l00393"></a>00393                             <span class="keywordflow">if</span> (iCpID&gt;=129 &amp;&amp; iCpID&lt;=140)
<a name="l00394"></a>00394                                 colECAL-&gt;addElement( lBlock );
<a name="l00395"></a>00395                             <span class="keywordflow">else</span>{
<a name="l00396"></a>00396                                 colHCAL-&gt;addElement( lBlock );
<a name="l00397"></a>00397                                 
<a name="l00398"></a>00398                             }
<a name="l00399"></a>00399                         }
<a name="l00400"></a>00400                         
<a name="l00401"></a>00401                         LcioEventNr++; <span class="comment">//Event start from 1.</span>
<a name="l00402"></a>00402                         
<a name="l00403"></a>00403                         evt-&gt;setRunNumber(  rn   ) ;
<a name="l00404"></a>00404                         evt-&gt;setEventNumber( LcioEventNr ) ;
<a name="l00405"></a>00405                         LCTime evttime( iEvtTime ) ;
<a name="l00406"></a>00406                         evt-&gt;setTimeStamp( evttime.timeStamp()  ) ;
<a name="l00407"></a>00407                         evt-&gt;addCollection( colECAL, <span class="stringliteral">"LabviewDataECAL"</span> );
<a name="l00408"></a>00408                         evt-&gt;addCollection( colHCAL, <span class="stringliteral">"LabviewDataHCAL"</span> );
<a name="l00409"></a>00409                         
<a name="l00410"></a>00410                         <span class="keywordflow">if</span> (writeoutTemperature &amp;&amp; newTemp){
<a name="l00411"></a>00411                             LCCollectionVec *TCol = <span class="keyword">new</span> LCCollectionVec( LCIO::LCGENERICOBJECT );
<a name="l00412"></a>00412                             
<a name="l00413"></a>00413                             <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; index_max; i++)
<a name="l00414"></a>00414                             {
<a name="l00415"></a>00415                                 <span class="keywordtype">int</span> LDANr = atoi(lda[i].c_str());
<a name="l00416"></a>00416                                 <span class="keywordtype">int</span> PortNr = atoi(port[i].c_str());
<a name="l00417"></a>00417                                 <span class="keywordtype">int</span> T1 = atoi(TSensor[i][1].c_str());
<a name="l00418"></a>00418                                 <span class="keywordtype">int</span> T2 = atoi(TSensor[i][2].c_str());
<a name="l00419"></a>00419                                 <span class="keywordtype">int</span> T3 = atoi(TSensor[i][3].c_str());
<a name="l00420"></a>00420                                 <span class="keywordtype">int</span> T4 = atoi(TSensor[i][4].c_str());
<a name="l00421"></a>00421                                 <span class="keywordtype">int</span> T5 = atoi(TSensor[i][5].c_str());
<a name="l00422"></a>00422                                 <span class="keywordtype">int</span> T6 = atoi(TSensor[i][6].c_str());
<a name="l00423"></a>00423                                 <span class="keywordtype">int</span> TDIF = atoi(TSensor[i][7].c_str());
<a name="l00424"></a>00424                                 <span class="keywordtype">int</span> TPWR = atoi(TSensor[i][8].c_str());
<a name="l00425"></a>00425                                 
<a name="l00426"></a>00426                                 <a class="code" href="classCALICE_1_1TempSensorBlock2.html">TempSensorBlock2</a>  *TSensor = <span class="keyword">new</span> <a class="code" href="classCALICE_1_1TempSensorBlock2.html">TempSensorBlock2</a>(LDANr, PortNr, T1, T2, T3, T4, T5, T6, TDIF, TPWR);
<a name="l00427"></a>00427                                 TCol-&gt;addElement(TSensor );
<a name="l00428"></a>00428                             }
<a name="l00429"></a>00429                             evt-&gt;addCollection( TCol, <span class="stringliteral">"TempSensor"</span>);
<a name="l00430"></a>00430                             foundTemperature = 0;
<a name="l00431"></a>00431                             writeoutTemperature = <span class="keyword">false</span>;
<a name="l00432"></a>00432                             newTemp = <span class="keyword">false</span>;
<a name="l00433"></a>00433                             index = 0;
<a name="l00434"></a>00434                         }
<a name="l00435"></a>00435                         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(writeoutTemperature &amp;&amp; oldTemp){
<a name="l00436"></a>00436                           LCCollectionVec *TCol = <span class="keyword">new</span> LCCollectionVec( LCIO::LCGENERICOBJECT );
<a name="l00437"></a>00437                           m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" Adding Temperature Collection TempSensorOld"</span> &lt;&lt;endl;
<a name="l00438"></a>00438                           <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; index_max; i++)
<a name="l00439"></a>00439                             {
<a name="l00440"></a>00440                               <span class="keywordtype">float</span> serial = -1;
<a name="l00441"></a>00441 
<a name="l00442"></a>00442                               <span class="comment">//m_out(MESSAGE) &lt;&lt; TSensor[i][1] &lt;&lt; endl;</span>
<a name="l00443"></a>00443 
<a name="l00444"></a>00444                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBO"</span>) serial = 4;
<a name="l00445"></a>00445                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBP"</span>) serial = 11;
<a name="l00446"></a>00446                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBR"</span>) serial = 5;
<a name="l00447"></a>00447                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBS"</span>) serial = 9;
<a name="l00448"></a>00448                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBX"</span>) serial = 8;
<a name="l00449"></a>00449                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBY"</span>) serial = 12;
<a name="l00450"></a>00450                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEBZ"</span>) serial = 6;
<a name="l00451"></a>00451                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XEC0"</span>) serial = 10;
<a name="l00452"></a>00452                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"A500XET5"</span>) serial = 13;
<a name="l00453"></a>00453                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONF"</span>) serial = 15;
<a name="l00454"></a>00454                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONG"</span>) serial = 14;
<a name="l00455"></a>00455                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONI"</span>) serial = 7;
<a name="l00456"></a>00456                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONJ"</span>) serial = 3;
<a name="l00457"></a>00457                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONK"</span>) serial = 1;
<a name="l00458"></a>00458                               <span class="keywordflow">if</span>(TSensor[i][1] == <span class="stringliteral">"AM01PONM"</span>) serial = 2;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460                               <span class="keywordtype">float</span> T1 = atof((TSensor[i][2].substr(0,4)).c_str());
<a name="l00461"></a>00461                               <span class="keywordtype">float</span> T2 = atof((TSensor[i][3].substr(0,4)).c_str());
<a name="l00462"></a>00462                               <span class="keywordtype">float</span> T3 = atof((TSensor[i][4].substr(0,4)).c_str());
<a name="l00463"></a>00463                               <span class="keywordtype">float</span> T4 = atof((TSensor[i][5].substr(0,4)).c_str());
<a name="l00464"></a>00464                               <span class="keywordtype">float</span> T5 = atof((TSensor[i][6].substr(0,4)).c_str());
<a name="l00465"></a>00465                               <span class="keywordtype">float</span> T6 = atof((TSensor[i][7].substr(0,4)).c_str());
<a name="l00466"></a>00466                               <span class="keywordtype">float</span> TDIF = atof((TSensor[i][8].substr(0,4)).c_str());
<a name="l00467"></a>00467                               <span class="keywordtype">float</span> TPWR = atof((TSensor[i][9].substr(0,4)).c_str());
<a name="l00468"></a>00468                                 
<a name="l00469"></a>00469                               <a class="code" href="classCALICE_1_1TempSensorBlockOld.html">TempSensorBlockOld</a>  *TSensor = <span class="keyword">new</span> <a class="code" href="classCALICE_1_1TempSensorBlockOld.html">TempSensorBlockOld</a>(serial, T1, T2, T3, T4, T5, T6, TDIF, TPWR);
<a name="l00470"></a>00470                               TCol-&gt;addElement(TSensor );
<a name="l00471"></a>00471                             }
<a name="l00472"></a>00472                           evt-&gt;addCollection( TCol, <span class="stringliteral">"TempSensorOld"</span>);
<a name="l00473"></a>00473                           m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" Added Temperature Collection TempSensorOld"</span> &lt;&lt;endl;
<a name="l00474"></a>00474                           foundTemperature2 = 0;
<a name="l00475"></a>00475                           foundTemperature3 = 0;
<a name="l00476"></a>00476                           writeoutTemperature = <span class="keyword">false</span>;
<a name="l00477"></a>00477                           oldTemp = <span class="keyword">false</span>;
<a name="l00478"></a>00478                           index = 0;
<a name="l00479"></a>00479                         }
<a name="l00480"></a>00480 
<a name="l00481"></a>00481                         ProcessorMgr::instance()-&gt;processEvent( evt ) ;
<a name="l00482"></a>00482                         
<a name="l00483"></a>00483                         <span class="comment">// ------------ IMPORTANT ------------- !</span>
<a name="l00484"></a>00484                         <span class="comment">// we created the event so we need to delete it ...</span>
<a name="l00485"></a>00485                         <span class="keyword">delete</span> evt ;
<a name="l00486"></a>00486                         
<a name="l00487"></a>00487                     } <span class="comment">// loop map key to save the event with each CycleNr.</span>
<a name="l00488"></a>00488                     
<a name="l00489"></a>00489                 } <span class="comment">// finished the current CycleNr.</span>
<a name="l00490"></a>00490                 
<a name="l00491"></a>00491                 <span class="comment">// start next CycleNr.</span>
<a name="l00492"></a>00492                 CycleNrChanged = <span class="keyword">false</span>;
<a name="l00493"></a>00493                 rData.clear();
<a name="l00494"></a>00494                 
<a name="l00495"></a>00495             } <span class="comment">// if the current Cycle is completed read in</span>
<a name="l00496"></a>00496             
<a name="l00497"></a>00497             m_out(DEBUG4) &lt;&lt;<span class="stringliteral">"lastCycleNr==currentCycleNr : lastCycleNr: "</span>&lt;&lt; lastCycleNr&lt;&lt;<span class="stringliteral">"  currentCycleNr:"</span>&lt;&lt;currentCycleNr &lt;&lt; endl;
<a name="l00498"></a>00498             
<a name="l00499"></a>00499             rData[read[1]].push_back(blockData);
<a name="l00500"></a>00500             
<a name="l00501"></a>00501         }
<a name="l00502"></a>00502         
<a name="l00503"></a>00503         
<a name="l00504"></a>00504         file_to_read.close();
<a name="l00505"></a>00505         
<a name="l00506"></a>00506         <span class="keyword">delete</span> runHdr ;
<a name="l00507"></a>00507         
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509     
<a name="l00510"></a>00510     
<a name="l00511"></a>00511     
<a name="l00512"></a><a class="code" href="classmarlin_1_1LabviewConverter2.html#3e5f8b39eb98d498d2acc4912f785e9d">00512</a>     <span class="keywordtype">void</span> <a class="code" href="classmarlin_1_1LabviewConverter2.html#3e5f8b39eb98d498d2acc4912f785e9d">LabviewConverter2::end</a>() {
<a name="l00513"></a>00513         m_out(MESSAGE) &lt;&lt;<span class="stringliteral">" ===== End of LabviewConverter2 processor ===== "</span> &lt;&lt;  endl;
<a name="l00514"></a>00514     }
<a name="l00515"></a>00515     
<a name="l00516"></a>00516 } <span class="comment">//namespace</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Apr 13 10:51:01 2015 for LABVIEW2LCIO by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
