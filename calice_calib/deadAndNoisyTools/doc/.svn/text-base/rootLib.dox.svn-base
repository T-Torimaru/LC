/**
\page  rootLib The libDeadAndNoisyTools root library

\section Idea The idea
Root's \c TTree::Draw() command is very powerful and flexibe
and allows the user to create many plots in a short time.
The libDeadAndNoisyTools library can be loaded in CINT and
provides a class to create the tree with the
rms and mean values of the channel spectra (see \ref Introduction).
In addition there are convenience functions to create the default
plots and to compare two runs.

Like this it is possible to check with just a few lines at the CINT prompt
whether a run is OK and which channels are bad, while having full access to
all the underlying information and interactively defining all cuts.

Currently the library provides five classes:
\li SimpleMapper A helper class which contains a map
(slot,frontent)->(module,layer)
\li TChannelSpectrumProperties A data class to put into a TTree.
\li SpectrumPropertiesRunInfo The main class for information about one run
\li RunComparator  A class to facilitate the comparison of two runs
\li ChannelExpertQuality A class defining the status quality words used in this code


The idea is the following: The SpectrumPropertiesRunInfo will provide a tree with the
spectrum properties. The TTree::Draw() command is very powerful and flexibe
and allows the user to create many plots in a short time.
The tree is filled when instantiating the SpectrumPropertiesRunInfo object. The
constructor just gets the run number and the file name of the AHC.cfg file.
It opens a file named <em>runNumber</em>.root to read the histograms.

\section Usage Usage
\subsection Cplusplus in normal C++ programms
Just include the header files you need and link the libDeadAndNoisyTools.so

\subsection Root in ROOT's CINT
Load the libDeadAndNoisyTools.so with
\verbatim .L libDeadAndNoisyTools.so \endverbatim
or put 
\verbatim gSystem->Load("libDeadAndNoisyTools.so"); \endverbatim
 into your rootlogon.C.
After this the classes are known to CINT and you can use them interactively.

\subsection Example Example
\li [1] Load the shared library
\li [2] Instantiate the SpectrumPropertiesRunInfo object. The input file name is
\c runNumber.root if no other name is given (360759.root in this case).
\li [3] Get a pointer to the tree.
\li [4] For convenience: Change the marker stype of the tree to \c +.

Afterwards you can draw the contents of the tree, e. g.
\li [5] Histogram the mean values for all channels in slot 19
\li [6] Draw a graph rmv vs. channel for all channels in module 9

\verbatim
root [1] .L libDeadAndNoisyTools.so
root [2] SpectrumPropertiesRunInfo spri(360759,"AHCforCERN2010.cfg");
root [3] TTree *t = spri.getSpectrumPropertiesTree()
root [4] t->SetMarkerStyle(2);
root [5] t->Draw("_mean","_slot==19")
root [6] t->Draw("_rms:_channel+_chip*18","_module==9")
\endverbatim

For more examples using the SpectrumPropertiesRunInfo have a look at the \ref
Examples "Examples" section. A complete list of all function can be found in
the SpectrumPropertiesRunInfo class documentation.

*/
