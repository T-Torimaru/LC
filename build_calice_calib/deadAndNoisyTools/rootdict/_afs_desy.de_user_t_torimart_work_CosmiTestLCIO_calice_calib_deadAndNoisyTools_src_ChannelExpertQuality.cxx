//
// File generated by /afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/v01-17-09/root/5.34.30/bin/rootcint at Fri Dec  1 18:26:35 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIafsdIdesydOdedIuserdItdItorimartdIworkdICosmiTestLCIOdIbuild_calice_calibdIdeadAndNoisyToolsdIrootdictdI_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "_afs_desy.de_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ChannelExpertQuality ChannelExpertQuality;
      #else
      class ChannelExpertQuality  {
         public:
         //friend XX;
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ModuleType ModuleType;
      #else
      class ModuleType  {
         public:
         //friend XX;
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SimpleMapper SimpleMapper;
      #else
      class SimpleMapper  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SimpleMapper::ModuleDescription ModuleDescription;
         #else
         class ModuleDescription  {
            public:
            //friend XX;
            int _module; //
            int _layer; //
            unsigned int _moduleType; //
         };
         #endif

         typedef ::pair<int,int> ModuleLayerID;
         typedef ::pair<int,int> SlotFrontendID;
         map< SlotFrontendID, ModuleDescription > _sf2mlMap; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SpectrumPropertiesRunInfo SpectrumPropertiesRunInfo;
      #else
      class SpectrumPropertiesRunInfo  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SpectrumPropertiesRunInfo::ChannelID ChannelID;
         #else
         class ChannelID  {
            public:
            //friend XX;
            int _module; ///< Module I
            int _chip; ///< Chip ID within the module
            int _channel; ///< Channel number on the chip
         };
         #endif

         int _runNumber; //< The run  number of this run
         ::TFile* _runFile; //< The file with the histograms per channel for one run
         ::SimpleMapper* _simpleMapper; //< The instance of the SimpleMapper object.
         ::TTree* _spectrumPropertiesTree; //< The internal pointer to the channel properties tree;
         ::TChannelSpectrumProperties* _channelSpectrumProperties; //< The data object for the tree.
         map< ChannelID, ::string > _histogramTitleMap; //
         map< ChannelID, ::TChannelSpectrumProperties > _channelSpectrumPropertiesMap; //
         bool createdTree; //flag to remember if the constructor created the tree (needed in destructor)
         unsigned int _moduleTypeMask; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RunComparator RunComparator;
      #else
      class RunComparator  {
         public:
         //friend XX;
         :: SpectrumPropertiesRunInfo* _firstRunInfo; ///< pointer to the first SpectrumPropertiesRunInfo
         :: SpectrumPropertiesRunInfo* _secondRunInfo; ///< pointer to the first SpectrumPropertiesRunInfo
         ::TGraph* _theGraph; ///< The internal instance of the graph
         ::TH1D* _xAxisHisto; ///< The internal instance of the x axis histogram
         ::TH1D* _yAxisHisto; ///< The internal instance of the y axis histogram
         map< ::SpectrumPropertiesRunInfo::ChannelID, pair< double, double >  > _channelValuesMap; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void ChannelExpertQuality_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ChannelExpertQuality_Dictionary();
   static void *new_ChannelExpertQuality(void *p = 0);
   static void *newArray_ChannelExpertQuality(Long_t size, void *p);
   static void delete_ChannelExpertQuality(void *p);
   static void deleteArray_ChannelExpertQuality(void *p);
   static void destruct_ChannelExpertQuality(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ChannelExpertQuality*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ChannelExpertQuality) == sizeof( ::ROOTShadow::Shadow::ChannelExpertQuality));
      ::ChannelExpertQuality *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ChannelExpertQuality),0);
      static ::ROOT::TGenericClassInfo 
         instance("ChannelExpertQuality", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/ChannelExpertQuality.h", 30,
                  typeid(::ChannelExpertQuality), ::ROOT::DefineBehavior(ptr, ptr),
                  &ChannelExpertQuality_ShowMembers, &ChannelExpertQuality_Dictionary, isa_proxy, 4,
                  sizeof(::ChannelExpertQuality) );
      instance.SetNew(&new_ChannelExpertQuality);
      instance.SetNewArray(&newArray_ChannelExpertQuality);
      instance.SetDelete(&delete_ChannelExpertQuality);
      instance.SetDeleteArray(&deleteArray_ChannelExpertQuality);
      instance.SetDestructor(&destruct_ChannelExpertQuality);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ChannelExpertQuality*)
   {
      return GenerateInitInstanceLocal((::ChannelExpertQuality*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ChannelExpertQuality*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ChannelExpertQuality_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::ChannelExpertQuality*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void ModuleType_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ModuleType_Dictionary();
   static void *new_ModuleType(void *p = 0);
   static void *newArray_ModuleType(Long_t size, void *p);
   static void delete_ModuleType(void *p);
   static void deleteArray_ModuleType(void *p);
   static void destruct_ModuleType(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ModuleType*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ModuleType) == sizeof( ::ROOTShadow::Shadow::ModuleType));
      ::ModuleType *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ModuleType),0);
      static ::ROOT::TGenericClassInfo 
         instance("ModuleType", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/ModuleType.h", 18,
                  typeid(::ModuleType), ::ROOT::DefineBehavior(ptr, ptr),
                  &ModuleType_ShowMembers, &ModuleType_Dictionary, isa_proxy, 4,
                  sizeof(::ModuleType) );
      instance.SetNew(&new_ModuleType);
      instance.SetNewArray(&newArray_ModuleType);
      instance.SetDelete(&delete_ModuleType);
      instance.SetDeleteArray(&deleteArray_ModuleType);
      instance.SetDestructor(&destruct_ModuleType);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ModuleType*)
   {
      return GenerateInitInstanceLocal((::ModuleType*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ModuleType*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ModuleType_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::ModuleType*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TChannelSpectrumProperties_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TChannelSpectrumProperties(void *p = 0);
   static void *newArray_TChannelSpectrumProperties(Long_t size, void *p);
   static void delete_TChannelSpectrumProperties(void *p);
   static void deleteArray_TChannelSpectrumProperties(void *p);
   static void destruct_TChannelSpectrumProperties(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TChannelSpectrumProperties*)
   {
      ::TChannelSpectrumProperties *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TChannelSpectrumProperties >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TChannelSpectrumProperties", ::TChannelSpectrumProperties::Class_Version(), "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/TChannelSpectrumProperties.h", 12,
                  typeid(::TChannelSpectrumProperties), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TChannelSpectrumProperties::Dictionary, isa_proxy, 4,
                  sizeof(::TChannelSpectrumProperties) );
      instance.SetNew(&new_TChannelSpectrumProperties);
      instance.SetNewArray(&newArray_TChannelSpectrumProperties);
      instance.SetDelete(&delete_TChannelSpectrumProperties);
      instance.SetDeleteArray(&deleteArray_TChannelSpectrumProperties);
      instance.SetDestructor(&destruct_TChannelSpectrumProperties);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TChannelSpectrumProperties*)
   {
      return GenerateInitInstanceLocal((::TChannelSpectrumProperties*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TChannelSpectrumProperties*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SimpleMapper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SimpleMapper_Dictionary();
   static void delete_SimpleMapper(void *p);
   static void deleteArray_SimpleMapper(void *p);
   static void destruct_SimpleMapper(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SimpleMapper*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SimpleMapper) == sizeof( ::ROOTShadow::Shadow::SimpleMapper));
      ::SimpleMapper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SimpleMapper),0);
      static ::ROOT::TGenericClassInfo 
         instance("SimpleMapper", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/SimpleMapper.h", 12,
                  typeid(::SimpleMapper), ::ROOT::DefineBehavior(ptr, ptr),
                  &SimpleMapper_ShowMembers, &SimpleMapper_Dictionary, isa_proxy, 4,
                  sizeof(::SimpleMapper) );
      instance.SetDelete(&delete_SimpleMapper);
      instance.SetDeleteArray(&deleteArray_SimpleMapper);
      instance.SetDestructor(&destruct_SimpleMapper);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SimpleMapper*)
   {
      return GenerateInitInstanceLocal((::SimpleMapper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SimpleMapper*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SimpleMapper_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SimpleMapper*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void SpectrumPropertiesRunInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SpectrumPropertiesRunInfo_Dictionary();
   static void delete_SpectrumPropertiesRunInfo(void *p);
   static void deleteArray_SpectrumPropertiesRunInfo(void *p);
   static void destruct_SpectrumPropertiesRunInfo(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SpectrumPropertiesRunInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SpectrumPropertiesRunInfo) == sizeof( ::ROOTShadow::Shadow::SpectrumPropertiesRunInfo));
      ::SpectrumPropertiesRunInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SpectrumPropertiesRunInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("SpectrumPropertiesRunInfo", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/SpectrumPropertiesRunInfo.h", 43,
                  typeid(::SpectrumPropertiesRunInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &SpectrumPropertiesRunInfo_ShowMembers, &SpectrumPropertiesRunInfo_Dictionary, isa_proxy, 4,
                  sizeof(::SpectrumPropertiesRunInfo) );
      instance.SetDelete(&delete_SpectrumPropertiesRunInfo);
      instance.SetDeleteArray(&deleteArray_SpectrumPropertiesRunInfo);
      instance.SetDestructor(&destruct_SpectrumPropertiesRunInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SpectrumPropertiesRunInfo*)
   {
      return GenerateInitInstanceLocal((::SpectrumPropertiesRunInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SpectrumPropertiesRunInfo_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void SpectrumPropertiesRunInfocLcLChannelID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SpectrumPropertiesRunInfocLcLChannelID_Dictionary();
   static void *new_SpectrumPropertiesRunInfocLcLChannelID(void *p = 0);
   static void *newArray_SpectrumPropertiesRunInfocLcLChannelID(Long_t size, void *p);
   static void delete_SpectrumPropertiesRunInfocLcLChannelID(void *p);
   static void deleteArray_SpectrumPropertiesRunInfocLcLChannelID(void *p);
   static void destruct_SpectrumPropertiesRunInfocLcLChannelID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SpectrumPropertiesRunInfo::ChannelID*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SpectrumPropertiesRunInfo::ChannelID) == sizeof( ::ROOTShadow::Shadow::SpectrumPropertiesRunInfo::ChannelID));
      ::SpectrumPropertiesRunInfo::ChannelID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SpectrumPropertiesRunInfo::ChannelID),0);
      static ::ROOT::TGenericClassInfo 
         instance("SpectrumPropertiesRunInfo::ChannelID", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/SpectrumPropertiesRunInfo.h", 49,
                  typeid(::SpectrumPropertiesRunInfo::ChannelID), ::ROOT::DefineBehavior(ptr, ptr),
                  &SpectrumPropertiesRunInfocLcLChannelID_ShowMembers, &SpectrumPropertiesRunInfocLcLChannelID_Dictionary, isa_proxy, 4,
                  sizeof(::SpectrumPropertiesRunInfo::ChannelID) );
      instance.SetNew(&new_SpectrumPropertiesRunInfocLcLChannelID);
      instance.SetNewArray(&newArray_SpectrumPropertiesRunInfocLcLChannelID);
      instance.SetDelete(&delete_SpectrumPropertiesRunInfocLcLChannelID);
      instance.SetDeleteArray(&deleteArray_SpectrumPropertiesRunInfocLcLChannelID);
      instance.SetDestructor(&destruct_SpectrumPropertiesRunInfocLcLChannelID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SpectrumPropertiesRunInfo::ChannelID*)
   {
      return GenerateInitInstanceLocal((::SpectrumPropertiesRunInfo::ChannelID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo::ChannelID*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SpectrumPropertiesRunInfocLcLChannelID_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo::ChannelID*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)
   {
      ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary, isa_proxy, 4,
                  sizeof(::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator) );
      instance.SetNew(&new_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void RunComparator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RunComparator_Dictionary();
   static void delete_RunComparator(void *p);
   static void deleteArray_RunComparator(void *p);
   static void destruct_RunComparator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RunComparator*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RunComparator) == sizeof( ::ROOTShadow::Shadow::RunComparator));
      ::RunComparator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RunComparator),0);
      static ::ROOT::TGenericClassInfo 
         instance("RunComparator", "/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/RunComparator.h", 52,
                  typeid(::RunComparator), ::ROOT::DefineBehavior(ptr, ptr),
                  &RunComparator_ShowMembers, &RunComparator_Dictionary, isa_proxy, 4,
                  sizeof(::RunComparator) );
      instance.SetDelete(&delete_RunComparator);
      instance.SetDeleteArray(&deleteArray_RunComparator);
      instance.SetDestructor(&destruct_RunComparator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RunComparator*)
   {
      return GenerateInitInstanceLocal((::RunComparator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RunComparator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RunComparator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::RunComparator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)
   {
      ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator", "prec_stl/map", 103,
                  typeid(::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 4,
                  sizeof(::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator) );
      instance.SetNew(&new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary();
   static void *new_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);
   static void deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);
   static void destruct_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)
   {
      ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator", "prec_stl/set", 89,
                  typeid(::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary, isa_proxy, 4,
                  sizeof(::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator) );
      instance.SetNew(&new_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDelete(&delete_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)
   {
      return GenerateInitInstanceLocal((::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)
   {
      ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator", "prec_stl/vector", 269,
                  typeid(::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator_Dictionary, isa_proxy, 4,
                  sizeof(::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator) );
      instance.SetNew(&new_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr TChannelSpectrumProperties::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TChannelSpectrumProperties::Class_Name()
{
   return "TChannelSpectrumProperties";
}

//______________________________________________________________________________
const char *TChannelSpectrumProperties::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TChannelSpectrumProperties*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TChannelSpectrumProperties::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TChannelSpectrumProperties*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TChannelSpectrumProperties::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TChannelSpectrumProperties*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TChannelSpectrumProperties::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TChannelSpectrumProperties*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void TChannelSpectrumProperties::Streamer(TBuffer &R__b)
{
   // Stream an object of class TChannelSpectrumProperties.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TChannelSpectrumProperties::Class(),this);
   } else {
      R__b.WriteClassBuffer(TChannelSpectrumProperties::Class(),this);
   }
}

//______________________________________________________________________________
void TChannelSpectrumProperties::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TChannelSpectrumProperties.
      TClass *R__cl = ::TChannelSpectrumProperties::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module", &_module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chip", &_chip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel", &_channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mean", &_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rms", &_rms);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TChannelSpectrumProperties(void *p) {
      return  p ? new(p) ::TChannelSpectrumProperties : new ::TChannelSpectrumProperties;
   }
   static void *newArray_TChannelSpectrumProperties(Long_t nElements, void *p) {
      return p ? new(p) ::TChannelSpectrumProperties[nElements] : new ::TChannelSpectrumProperties[nElements];
   }
   // Wrapper around operator delete
   static void delete_TChannelSpectrumProperties(void *p) {
      delete ((::TChannelSpectrumProperties*)p);
   }
   static void deleteArray_TChannelSpectrumProperties(void *p) {
      delete [] ((::TChannelSpectrumProperties*)p);
   }
   static void destruct_TChannelSpectrumProperties(void *p) {
      typedef ::TChannelSpectrumProperties current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TChannelSpectrumProperties

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator : new ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator;
   }
   static void *newArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator[nElements] : new ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p) {
      delete ((::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)p);
   }
   static void deleteArray_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)p);
   }
   static void destruct_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void *p) {
      typedef ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator

//______________________________________________________________________________
namespace ROOTDict {
   void SpectrumPropertiesRunInfocLcLChannelID_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SpectrumPropertiesRunInfo::ChannelID.
      typedef ::ROOTShadow::Shadow::SpectrumPropertiesRunInfo::ChannelID ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo::ChannelID*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_module", &sobj->_module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chip", &sobj->_chip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channel", &sobj->_channel);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SpectrumPropertiesRunInfocLcLChannelID(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SpectrumPropertiesRunInfo::ChannelID : new ::SpectrumPropertiesRunInfo::ChannelID;
   }
   static void *newArray_SpectrumPropertiesRunInfocLcLChannelID(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SpectrumPropertiesRunInfo::ChannelID[nElements] : new ::SpectrumPropertiesRunInfo::ChannelID[nElements];
   }
   // Wrapper around operator delete
   static void delete_SpectrumPropertiesRunInfocLcLChannelID(void *p) {
      delete ((::SpectrumPropertiesRunInfo::ChannelID*)p);
   }
   static void deleteArray_SpectrumPropertiesRunInfocLcLChannelID(void *p) {
      delete [] ((::SpectrumPropertiesRunInfo::ChannelID*)p);
   }
   static void destruct_SpectrumPropertiesRunInfocLcLChannelID(void *p) {
      typedef ::SpectrumPropertiesRunInfo::ChannelID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SpectrumPropertiesRunInfo::ChannelID

//______________________________________________________________________________
namespace ROOTDict {
   void SpectrumPropertiesRunInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SpectrumPropertiesRunInfo.
      typedef ::ROOTShadow::Shadow::SpectrumPropertiesRunInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SpectrumPropertiesRunInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_runNumber", &sobj->_runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_runFile", &sobj->_runFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_simpleMapper", &sobj->_simpleMapper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_spectrumPropertiesTree", &sobj->_spectrumPropertiesTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_channelSpectrumProperties", &sobj->_channelSpectrumProperties);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_histogramTitleMap", (void*)&sobj->_histogramTitleMap);
      R__insp.InspectMember("map<ChannelID,std::string>", (void*)&sobj->_histogramTitleMap, "_histogramTitleMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channelSpectrumPropertiesMap", (void*)&sobj->_channelSpectrumPropertiesMap);
      R__insp.InspectMember("map<ChannelID,TChannelSpectrumProperties>", (void*)&sobj->_channelSpectrumPropertiesMap, "_channelSpectrumPropertiesMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "createdTree", &sobj->createdTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_moduleTypeMask", &sobj->_moduleTypeMask);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SpectrumPropertiesRunInfo(void *p) {
      delete ((::SpectrumPropertiesRunInfo*)p);
   }
   static void deleteArray_SpectrumPropertiesRunInfo(void *p) {
      delete [] ((::SpectrumPropertiesRunInfo*)p);
   }
   static void destruct_SpectrumPropertiesRunInfo(void *p) {
      typedef ::SpectrumPropertiesRunInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SpectrumPropertiesRunInfo

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator : new ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
   }
   static void *newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[nElements] : new ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      delete ((::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)p);
   }
   static void deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)p);
   }
   static void destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      typedef ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator : new ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
   }
   static void *newArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[nElements] : new ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      delete ((::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)p);
   }
   static void deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      delete [] ((::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)p);
   }
   static void destruct_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void *p) {
      typedef ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator

//______________________________________________________________________________
namespace ROOTDict {
   void RunComparator_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RunComparator.
      typedef ::ROOTShadow::Shadow::RunComparator ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::RunComparator*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_theGraph", &sobj->_theGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_xAxisHisto", &sobj->_xAxisHisto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_yAxisHisto", &sobj->_yAxisHisto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_channelValuesMap", (void*)&sobj->_channelValuesMap);
      R__insp.InspectMember("map<SpectrumPropertiesRunInfo::ChannelID,std::pair<double,double> >", (void*)&sobj->_channelValuesMap, "_channelValuesMap.", false);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_RunComparator(void *p) {
      delete ((::RunComparator*)p);
   }
   static void deleteArray_RunComparator(void *p) {
      delete [] ((::RunComparator*)p);
   }
   static void destruct_RunComparator(void *p) {
      typedef ::RunComparator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RunComparator

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator : new ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator;
   }
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator[nElements] : new ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)p);
   }
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)p);
   }
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator

//______________________________________________________________________________
namespace ROOTDict {
   void SimpleMapper_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SimpleMapper.
      typedef ::ROOTShadow::Shadow::SimpleMapper ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SimpleMapper*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sf2mlMap", (void*)&sobj->_sf2mlMap);
      R__insp.InspectMember("map<SlotFrontendID,ModuleDescription>", (void*)&sobj->_sf2mlMap, "_sf2mlMap.", false);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_SimpleMapper(void *p) {
      delete ((::SimpleMapper*)p);
   }
   static void deleteArray_SimpleMapper(void *p) {
      delete [] ((::SimpleMapper*)p);
   }
   static void destruct_SimpleMapper(void *p) {
      typedef ::SimpleMapper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SimpleMapper

//______________________________________________________________________________
namespace ROOTDict {
   void ModuleType_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ModuleType.
      typedef ::ROOTShadow::Shadow::ModuleType ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::ModuleType*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ModuleType(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ModuleType : new ::ModuleType;
   }
   static void *newArray_ModuleType(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ModuleType[nElements] : new ::ModuleType[nElements];
   }
   // Wrapper around operator delete
   static void delete_ModuleType(void *p) {
      delete ((::ModuleType*)p);
   }
   static void deleteArray_ModuleType(void *p) {
      delete [] ((::ModuleType*)p);
   }
   static void destruct_ModuleType(void *p) {
      typedef ::ModuleType current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ModuleType

//______________________________________________________________________________
namespace ROOTDict {
   void ChannelExpertQuality_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ChannelExpertQuality.
      typedef ::ROOTShadow::Shadow::ChannelExpertQuality ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::ChannelExpertQuality*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ChannelExpertQuality(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChannelExpertQuality : new ::ChannelExpertQuality;
   }
   static void *newArray_ChannelExpertQuality(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ChannelExpertQuality[nElements] : new ::ChannelExpertQuality[nElements];
   }
   // Wrapper around operator delete
   static void delete_ChannelExpertQuality(void *p) {
      delete ((::ChannelExpertQuality*)p);
   }
   static void deleteArray_ChannelExpertQuality(void *p) {
      delete [] ((::ChannelExpertQuality*)p);
   }
   static void destruct_ChannelExpertQuality(void *p) {
      typedef ::ChannelExpertQuality current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ChannelExpertQuality

namespace ROOTDict {
   void maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR_Dictionary();
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p = 0);
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(Long_t size, void *p);
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p);
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p);
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>*)
   {
      map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>", -2, "prec_stl/map", 63,
                  typeid(map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR_Dictionary, isa_proxy, 0,
                  sizeof(map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>) );
      instance.SetNew(&new_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR);
      instance.SetNewArray(&newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR);
      instance.SetDelete(&delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR);
      instance.SetDeleteArray(&deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR);
      instance.SetDestructor(&destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties> : new map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>;
   }
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>[nElements] : new map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p) {
      delete ((map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>*)p);
   }
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p) {
      delete [] ((map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>*)p);
   }
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgR(void *p) {
      typedef map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>

namespace ROOTDict {
   void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR_Dictionary();
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p = 0);
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(Long_t size, void *p);
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p);
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p);
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >*)
   {
      map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >", -2, "prec_stl/map", 63,
                  typeid(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >) );
      instance.SetNew(&new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
      instance.SetNewArray(&newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
      instance.SetDelete(&delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
      instance.SetDestructor(&destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > : new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >;
   }
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >[nElements] : new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p) {
      delete ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >*)p);
   }
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p) {
      delete [] ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >*)p);
   }
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR(void *p) {
      typedef map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >

namespace ROOTDict {
   void maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR_Dictionary();
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p = 0);
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(Long_t size, void *p);
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p);
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p);
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<SpectrumPropertiesRunInfo::ChannelID,string>*)
   {
      map<SpectrumPropertiesRunInfo::ChannelID,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<SpectrumPropertiesRunInfo::ChannelID,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<SpectrumPropertiesRunInfo::ChannelID,string>", -2, "prec_stl/map", 63,
                  typeid(map<SpectrumPropertiesRunInfo::ChannelID,string>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<SpectrumPropertiesRunInfo::ChannelID,string>) );
      instance.SetNew(&new_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR);
      instance.SetNewArray(&newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR);
      instance.SetDelete(&delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR);
      instance.SetDestructor(&destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<SpectrumPropertiesRunInfo::ChannelID,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<SpectrumPropertiesRunInfo::ChannelID,string>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,string> : new map<SpectrumPropertiesRunInfo::ChannelID,string>;
   }
   static void *newArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SpectrumPropertiesRunInfo::ChannelID,string>[nElements] : new map<SpectrumPropertiesRunInfo::ChannelID,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p) {
      delete ((map<SpectrumPropertiesRunInfo::ChannelID,string>*)p);
   }
   static void deleteArray_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p) {
      delete [] ((map<SpectrumPropertiesRunInfo::ChannelID,string>*)p);
   }
   static void destruct_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringgR(void *p) {
      typedef map<SpectrumPropertiesRunInfo::ChannelID,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<SpectrumPropertiesRunInfo::ChannelID,string>

namespace ROOTDict {
   void maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR_Dictionary();
   static void *new_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p = 0);
   static void *newArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(Long_t size, void *p);
   static void delete_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p);
   static void deleteArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p);
   static void destruct_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<pair<int,int>,SimpleMapper::ModuleDescription>*)
   {
      map<pair<int,int>,SimpleMapper::ModuleDescription> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<pair<int,int>,SimpleMapper::ModuleDescription>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<pair<int,int>,SimpleMapper::ModuleDescription>", -2, "prec_stl/map", 63,
                  typeid(map<pair<int,int>,SimpleMapper::ModuleDescription>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR_Dictionary, isa_proxy, 0,
                  sizeof(map<pair<int,int>,SimpleMapper::ModuleDescription>) );
      instance.SetNew(&new_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR);
      instance.SetNewArray(&newArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR);
      instance.SetDelete(&delete_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR);
      instance.SetDeleteArray(&deleteArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR);
      instance.SetDestructor(&destruct_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<pair<int,int>,SimpleMapper::ModuleDescription> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<pair<int,int>,SimpleMapper::ModuleDescription>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<pair<int,int>,SimpleMapper::ModuleDescription>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<pair<int,int>,SimpleMapper::ModuleDescription> : new map<pair<int,int>,SimpleMapper::ModuleDescription>;
   }
   static void *newArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<pair<int,int>,SimpleMapper::ModuleDescription>[nElements] : new map<pair<int,int>,SimpleMapper::ModuleDescription>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p) {
      delete ((map<pair<int,int>,SimpleMapper::ModuleDescription>*)p);
   }
   static void deleteArray_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p) {
      delete [] ((map<pair<int,int>,SimpleMapper::ModuleDescription>*)p);
   }
   static void destruct_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongR(void *p) {
      typedef map<pair<int,int>,SimpleMapper::ModuleDescription> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<pair<int,int>,SimpleMapper::ModuleDescription>

namespace ROOTDict {
   void setlESpectrumPropertiesRunInfocLcLChannelIDgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void setlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary();
   static void *new_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p = 0);
   static void *newArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR(Long_t size, void *p);
   static void delete_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);
   static void deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);
   static void destruct_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const set<SpectrumPropertiesRunInfo::ChannelID>*)
   {
      set<SpectrumPropertiesRunInfo::ChannelID> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(set<SpectrumPropertiesRunInfo::ChannelID>),0);
      static ::ROOT::TGenericClassInfo 
         instance("set<SpectrumPropertiesRunInfo::ChannelID>", -2, "prec_stl/set", 49,
                  typeid(set<SpectrumPropertiesRunInfo::ChannelID>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &setlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary, isa_proxy, 4,
                  sizeof(set<SpectrumPropertiesRunInfo::ChannelID>) );
      instance.SetNew(&new_setlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetNewArray(&newArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDelete(&delete_setlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDeleteArray(&deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDestructor(&destruct_setlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Insert< set<SpectrumPropertiesRunInfo::ChannelID> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const set<SpectrumPropertiesRunInfo::ChannelID>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void setlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const set<SpectrumPropertiesRunInfo::ChannelID>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) set<SpectrumPropertiesRunInfo::ChannelID> : new set<SpectrumPropertiesRunInfo::ChannelID>;
   }
   static void *newArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) set<SpectrumPropertiesRunInfo::ChannelID>[nElements] : new set<SpectrumPropertiesRunInfo::ChannelID>[nElements];
   }
   // Wrapper around operator delete
   static void delete_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      delete ((set<SpectrumPropertiesRunInfo::ChannelID>*)p);
   }
   static void deleteArray_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      delete [] ((set<SpectrumPropertiesRunInfo::ChannelID>*)p);
   }
   static void destruct_setlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      typedef set<SpectrumPropertiesRunInfo::ChannelID> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class set<SpectrumPropertiesRunInfo::ChannelID>

namespace ROOTDict {
   void vectorlESpectrumPropertiesRunInfocLcLChannelIDgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary();
   static void *new_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p = 0);
   static void *newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(Long_t size, void *p);
   static void delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);
   static void deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);
   static void destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<SpectrumPropertiesRunInfo::ChannelID>*)
   {
      vector<SpectrumPropertiesRunInfo::ChannelID> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SpectrumPropertiesRunInfo::ChannelID>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SpectrumPropertiesRunInfo::ChannelID>", -2, "prec_stl/vector", 49,
                  typeid(vector<SpectrumPropertiesRunInfo::ChannelID>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SpectrumPropertiesRunInfo::ChannelID>) );
      instance.SetNew(&new_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetNewArray(&newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDelete(&delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDeleteArray(&deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.SetDestructor(&destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<SpectrumPropertiesRunInfo::ChannelID> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SpectrumPropertiesRunInfo::ChannelID>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESpectrumPropertiesRunInfocLcLChannelIDgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<SpectrumPropertiesRunInfo::ChannelID>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SpectrumPropertiesRunInfo::ChannelID> : new vector<SpectrumPropertiesRunInfo::ChannelID>;
   }
   static void *newArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SpectrumPropertiesRunInfo::ChannelID>[nElements] : new vector<SpectrumPropertiesRunInfo::ChannelID>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      delete ((vector<SpectrumPropertiesRunInfo::ChannelID>*)p);
   }
   static void deleteArray_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      delete [] ((vector<SpectrumPropertiesRunInfo::ChannelID>*)p);
   }
   static void destruct_vectorlESpectrumPropertiesRunInfocLcLChannelIDgR(void *p) {
      typedef vector<SpectrumPropertiesRunInfo::ChannelID> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<SpectrumPropertiesRunInfo::ChannelID>

namespace ROOTDict {
   void vectorlETChannelSpectrumPropertiesgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETChannelSpectrumPropertiesgR_Dictionary();
   static void *new_vectorlETChannelSpectrumPropertiesgR(void *p = 0);
   static void *newArray_vectorlETChannelSpectrumPropertiesgR(Long_t size, void *p);
   static void delete_vectorlETChannelSpectrumPropertiesgR(void *p);
   static void deleteArray_vectorlETChannelSpectrumPropertiesgR(void *p);
   static void destruct_vectorlETChannelSpectrumPropertiesgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TChannelSpectrumProperties>*)
   {
      vector<TChannelSpectrumProperties> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TChannelSpectrumProperties>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TChannelSpectrumProperties>", -2, "prec_stl/vector", 49,
                  typeid(vector<TChannelSpectrumProperties>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETChannelSpectrumPropertiesgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TChannelSpectrumProperties>) );
      instance.SetNew(&new_vectorlETChannelSpectrumPropertiesgR);
      instance.SetNewArray(&newArray_vectorlETChannelSpectrumPropertiesgR);
      instance.SetDelete(&delete_vectorlETChannelSpectrumPropertiesgR);
      instance.SetDeleteArray(&deleteArray_vectorlETChannelSpectrumPropertiesgR);
      instance.SetDestructor(&destruct_vectorlETChannelSpectrumPropertiesgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TChannelSpectrumProperties> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TChannelSpectrumProperties>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETChannelSpectrumPropertiesgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TChannelSpectrumProperties>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETChannelSpectrumPropertiesgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TChannelSpectrumProperties> : new vector<TChannelSpectrumProperties>;
   }
   static void *newArray_vectorlETChannelSpectrumPropertiesgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TChannelSpectrumProperties>[nElements] : new vector<TChannelSpectrumProperties>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETChannelSpectrumPropertiesgR(void *p) {
      delete ((vector<TChannelSpectrumProperties>*)p);
   }
   static void deleteArray_vectorlETChannelSpectrumPropertiesgR(void *p) {
      delete [] ((vector<TChannelSpectrumProperties>*)p);
   }
   static void destruct_vectorlETChannelSpectrumPropertiesgR(void *p) {
      typedef vector<TChannelSpectrumProperties> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TChannelSpectrumProperties>

/********************************************************
* /afs/desy.de/user/t/torimart/work/CosmiTestLCIO/build_calice_calib/deadAndNoisyTools/rootdict/_afs_desy.de_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

extern "C" void G__set_cpp_environment_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/ChannelExpertQuality.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/ModuleType.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/RunComparator.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/SimpleMapper.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/SpectrumPropertiesRunInfo.h");
  G__add_compiledheader("/afs/desy.de/user/t/torimart/work/CosmiTestLCIO/calice_calib/deadAndNoisyTools/include/TChannelSpectrumProperties.h");
  G__cpp_reset_tagtable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();
}
#include <new>
extern "C" int G__cpp_dllrev_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ChannelExpertQuality */
// automatic default constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChannelExpertQuality *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ChannelExpertQuality[n];
     } else {
       p = new((void*) gvp) ChannelExpertQuality[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ChannelExpertQuality;
     } else {
       p = new((void*) gvp) ChannelExpertQuality;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ChannelExpertQuality* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ChannelExpertQuality(*(ChannelExpertQuality*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ChannelExpertQuality G__TChannelExpertQuality;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ChannelExpertQuality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ChannelExpertQuality*) (soff+(sizeof(ChannelExpertQuality)*i)))->~G__TChannelExpertQuality();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ChannelExpertQuality*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ChannelExpertQuality*) (soff))->~G__TChannelExpertQuality();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ChannelExpertQuality* dest = (ChannelExpertQuality*) G__getstructoffset();
   *dest = *(ChannelExpertQuality*) libp->para[0].ref;
   const ChannelExpertQuality& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ModuleType */
// automatic default constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ModuleType *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ModuleType[n];
     } else {
       p = new((void*) gvp) ModuleType[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ModuleType;
     } else {
       p = new((void*) gvp) ModuleType;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ModuleType* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ModuleType(*(ModuleType*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ModuleType G__TModuleType;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ModuleType*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ModuleType*) (soff+(sizeof(ModuleType)*i)))->~G__TModuleType();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ModuleType*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ModuleType*) (soff))->~G__TModuleType();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ModuleType* dest = (ModuleType*) G__getstructoffset();
   *dest = *(ModuleType*) libp->para[0].ref;
   const ModuleType& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TChannelSpectrumProperties */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TChannelSpectrumProperties* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TChannelSpectrumProperties(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannelSpectrumProperties((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TChannelSpectrumProperties((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TChannelSpectrumProperties((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TChannelSpectrumProperties((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TChannelSpectrumProperties[n];
       } else {
         p = new((void*) gvp) TChannelSpectrumProperties[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TChannelSpectrumProperties;
       } else {
         p = new((void*) gvp) TChannelSpectrumProperties;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannelSpectrumProperties*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TChannelSpectrumProperties::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannelSpectrumProperties::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TChannelSpectrumProperties::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TChannelSpectrumProperties::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TChannelSpectrumProperties*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannelSpectrumProperties::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TChannelSpectrumProperties::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TChannelSpectrumProperties::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TChannelSpectrumProperties::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TChannelSpectrumProperties* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TChannelSpectrumProperties(*(TChannelSpectrumProperties*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TChannelSpectrumProperties G__TTChannelSpectrumProperties;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TChannelSpectrumProperties*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TChannelSpectrumProperties*) (soff+(sizeof(TChannelSpectrumProperties)*i)))->~G__TTChannelSpectrumProperties();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TChannelSpectrumProperties*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TChannelSpectrumProperties*) (soff))->~G__TTChannelSpectrumProperties();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TChannelSpectrumProperties* dest = (TChannelSpectrumProperties*) G__getstructoffset();
   *dest = *(TChannelSpectrumProperties*) libp->para[0].ref;
   const TChannelSpectrumProperties& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SimpleMapper */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SimpleMapper* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SimpleMapper(*((string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) SimpleMapper(*((string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         SimpleMapper::ModuleLayerID* pobj;
         SimpleMapper::ModuleLayerID xobj = ((SimpleMapper*) G__getstructoffset())->getModuleLayerID(*((SimpleMapper::SlotFrontendID*) G__int(libp->para[0])));
         pobj = new SimpleMapper::ModuleLayerID(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SimpleMapper*) G__getstructoffset())->isAHC8(*((SimpleMapper::SlotFrontendID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SimpleMapper*) G__getstructoffset())->isTCMT(*((SimpleMapper::SlotFrontendID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleMapper*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SimpleMapper*) G__getstructoffset())->getModuleType(*((SimpleMapper::SlotFrontendID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SimpleMapper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SimpleMapper(*(SimpleMapper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SimpleMapper G__TSimpleMapper;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SimpleMapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SimpleMapper*) (soff+(sizeof(SimpleMapper)*i)))->~G__TSimpleMapper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SimpleMapper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SimpleMapper*) (soff))->~G__TSimpleMapper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SimpleMapper* dest = (SimpleMapper*) G__getstructoffset();
   *dest = *(SimpleMapper*) libp->para[0].ref;
   const SimpleMapper& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SpectrumPropertiesRunInfo */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpectrumPropertiesRunInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((string*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]), *((string*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo(
(Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpectrumPropertiesRunInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SpectrumPropertiesRunInfo((Int_t) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->getSpectrumPropertiesTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->print(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getNoisyChannels((Double_t) G__double(libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithRMSCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithRMSCut((Double_t) G__double(libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithRMSCut();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithMeanCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithMeanCut((Double_t) G__double(libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelsWithMeanCut();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SpectrumPropertiesRunInfo*) G__getstructoffset())->printChannels(*(vector<SpectrumPropertiesRunInfo::ChannelID>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelHisto(*((SpectrumPropertiesRunInfo::ChannelID*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelHisto((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelHisto((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SpectrumPropertiesRunInfo::getGlobalChannelNumber(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         SpectrumPropertiesRunInfo::ChannelID* pobj;
         SpectrumPropertiesRunInfo::ChannelID xobj = SpectrumPropertiesRunInfo::getChannelID((Int_t) G__int(libp->para[0]));
         pobj = new SpectrumPropertiesRunInfo::ChannelID(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SpectrumPropertiesRunInfo::setNChipsPerModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SpectrumPropertiesRunInfo::setNChannelsPerChip((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SpectrumPropertiesRunInfo::getNChannelsPerChip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SpectrumPropertiesRunInfo::getNChipsPerModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TChannelSpectrumProperties* pobj;
         const TChannelSpectrumProperties xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelSpectrumProperties(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new TChannelSpectrumProperties(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TChannelSpectrumProperties* pobj;
         const TChannelSpectrumProperties xobj = ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getChannelSpectrumProperties((Int_t) G__int(libp->para[0]));
         pobj = new TChannelSpectrumProperties(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->getSpectrumPropertiesTreeObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->drawGetDeadChannelsPlot((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->drawGetDeadChannelsPlot((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((SpectrumPropertiesRunInfo*) G__getstructoffset())->drawGetDeadChannelsPlot());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SpectrumPropertiesRunInfo*) G__getstructoffset())->getRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SpectrumPropertiesRunInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SpectrumPropertiesRunInfo(*(SpectrumPropertiesRunInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SpectrumPropertiesRunInfo G__TSpectrumPropertiesRunInfo;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SpectrumPropertiesRunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SpectrumPropertiesRunInfo*) (soff+(sizeof(SpectrumPropertiesRunInfo)*i)))->~G__TSpectrumPropertiesRunInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SpectrumPropertiesRunInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SpectrumPropertiesRunInfo*) (soff))->~G__TSpectrumPropertiesRunInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpectrumPropertiesRunInfo* dest = (SpectrumPropertiesRunInfo*) G__getstructoffset();
   *dest = *(SpectrumPropertiesRunInfo*) libp->para[0].ref;
   const SpectrumPropertiesRunInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SpectrumPropertiesRunInfo::ChannelID */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpectrumPropertiesRunInfo::ChannelID* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo::ChannelID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo::ChannelID(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo::ChannelID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo::ChannelID((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SpectrumPropertiesRunInfo::ChannelID((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SpectrumPropertiesRunInfo::ChannelID((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SpectrumPropertiesRunInfo::ChannelID[n];
       } else {
         p = new((void*) gvp) SpectrumPropertiesRunInfo::ChannelID[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SpectrumPropertiesRunInfo::ChannelID;
       } else {
         p = new((void*) gvp) SpectrumPropertiesRunInfo::ChannelID;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SpectrumPropertiesRunInfo::ChannelID*) G__getstructoffset())->operator<(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const SpectrumPropertiesRunInfo::ChannelID*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((const SpectrumPropertiesRunInfo::ChannelID*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SpectrumPropertiesRunInfo::ChannelID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SpectrumPropertiesRunInfo::ChannelID(*(SpectrumPropertiesRunInfo::ChannelID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SpectrumPropertiesRunInfo::ChannelID G__TSpectrumPropertiesRunInfocLcLChannelID;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SpectrumPropertiesRunInfo::ChannelID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SpectrumPropertiesRunInfo::ChannelID*) (soff+(sizeof(SpectrumPropertiesRunInfo::ChannelID)*i)))->~G__TSpectrumPropertiesRunInfocLcLChannelID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SpectrumPropertiesRunInfo::ChannelID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SpectrumPropertiesRunInfo::ChannelID*) (soff))->~G__TSpectrumPropertiesRunInfocLcLChannelID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SpectrumPropertiesRunInfo::ChannelID* dest = (SpectrumPropertiesRunInfo::ChannelID*) G__getstructoffset();
   *dest = *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref;
   const SpectrumPropertiesRunInfo::ChannelID& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reference obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->at((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_reference obj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->at((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->begin();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->end();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->rend();
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->resize((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->resize((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]), *((SpectrumPropertiesRunInfo::ChannelID*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reference obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->operator[]((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_reference obj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->operator[]((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >[n];
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >;
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]), *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]), *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[0])), *((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[0])), *((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->operator=(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->reserve((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SpectrumPropertiesRunInfo::ChannelID& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SpectrumPropertiesRunInfo::ChannelID& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->push_back(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->swap(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->insert(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[1].ref);
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->insert(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), *((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->insert(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), (vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type) G__int(libp->para[1])
, *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->erase(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->erase(*((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), *((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) (soff+(sizeof(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >)*i)))->~G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) (soff))->~G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
     } else {
       p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(libp->para[0].ref ? *(const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer*) libp->para[0].ref : *(const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(libp->para[0].ref ? *(const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer*) libp->para[0].ref : *(const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::reference obj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::reference obj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator[](*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator+=(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator+(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator-=(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator-(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer& obj = ((const vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator=(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref);
         pobj = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(*(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) (soff+(sizeof(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator)*i)))->~G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) (soff))->~G__TvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RunComparator */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunComparator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RunComparator(*(SpectrumPropertiesRunInfo*) libp->para[0].ref, *(SpectrumPropertiesRunInfo*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) RunComparator(*(SpectrumPropertiesRunInfo*) libp->para[0].ref, *(SpectrumPropertiesRunInfo*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunComparator*) G__getstructoffset())->prepareGraph((std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&) ) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunComparator*) G__getstructoffset())->prepareGraph((std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&)) G__int(libp->para[0]), *(vector<SpectrumPropertiesRunInfo::ChannelID>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<double,double>* pobj;
         pair<double,double> xobj = RunComparator::calculateChannelAndPedestalCorrectedMean(*(TChannelSpectrumProperties*) libp->para[0].ref, *(TChannelSpectrumProperties*) libp->para[1].ref);
         pobj = new pair<double,double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RunComparator*) G__getstructoffset())->getGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RunComparator*) G__getstructoffset())->getXAxisHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((RunComparator*) G__getstructoffset())->getYAxisHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,std::pair<double,double> >& obj = ((const RunComparator*) G__getstructoffset())->getChannelValuesMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const set<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const RunComparator*) G__getstructoffset())->getChannelsWithCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const set<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const RunComparator*) G__getstructoffset())->getChannelsWithCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const set<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const RunComparator*) G__getstructoffset())->getChannelsWithCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const set<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const RunComparator*) G__getstructoffset())->getChannelsWithCut((Double_t) G__double(libp->para[0]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const set<SpectrumPropertiesRunInfo::ChannelID>* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID> xobj = ((const RunComparator*) G__getstructoffset())->getChannelsWithCut();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RunComparator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RunComparator(*(RunComparator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RunComparator G__TRunComparator;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RunComparator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RunComparator*) (soff+(sizeof(RunComparator)*i)))->~G__TRunComparator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RunComparator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RunComparator*) (soff))->~G__TRunComparator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >[n];
     } else {
       p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >;
     } else {
       p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->operator=(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->begin();
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->end();
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->rbegin();
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->rend();
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<double,double>& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->operator[](*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator,bool>* pobj;
         pair<map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator,bool> xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->insert(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->insert(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])), *(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type*) libp->para[1].ref);
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->insert(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->insert(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->erase(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->erase(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->erase(*((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[0])), *((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->swap(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->find(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->count(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->lower_bound(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) G__getstructoffset())->upper_bound(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) (soff+(sizeof(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >)*i)))->~G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*) (soff))->~G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator[n];
     } else {
       p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator;
     } else {
       p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator=(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator& obj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator* pobj;
         map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator xobj = ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator==(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) G__getstructoffset())->operator!=(*(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) (soff+(sizeof(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator)*i)))->~G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*) (soff))->~G__TmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >[n];
     } else {
       p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >;
     } else {
       p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >& obj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->operator=(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->begin();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->end();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->rbegin();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->rend();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator,bool>* pobj;
         pair<set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator,bool> xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->insert(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new pair<set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->insert(*((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), *(SpectrumPropertiesRunInfo::ChannelID*) libp->para[1].ref);
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->erase(*((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->erase(*((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[0])), *((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->swap(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->find(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->count(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->lower_bound(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) G__getstructoffset())->upper_bound(*(SpectrumPropertiesRunInfo::ChannelID*) libp->para[0].ref);
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) (soff+(sizeof(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >)*i)))->~G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*) (soff))->~G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[n];
     } else {
       p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
     } else {
       p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator=(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::value_type* pobj;
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::value_type xobj = ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator*();
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::value_type(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator& obj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator* pobj;
         set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator xobj = ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator==(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) G__getstructoffset())->operator!=(*(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) (soff+(sizeof(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator)*i)))->~G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*) (soff))->~G__TsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reference obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->at((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_reference obj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->at((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->begin();
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->end();
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->rend();
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->resize((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->resize((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]), *((TChannelSpectrumProperties*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reference obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->operator[]((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_reference obj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->operator[]((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >[n];
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >;
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]), *(TChannelSpectrumProperties*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]), *(TChannelSpectrumProperties*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[0])), *((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[0])), *((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->operator=(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->reserve((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TChannelSpectrumProperties& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TChannelSpectrumProperties& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->push_back(*(TChannelSpectrumProperties*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->swap(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->insert(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[0])), *(TChannelSpectrumProperties*) libp->para[1].ref);
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->insert(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[0])), *((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->insert(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[0])), (vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type) G__int(libp->para[1])
, *(TChannelSpectrumProperties*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->erase(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->erase(*((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[0])), *((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) (soff+(sizeof(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >)*i)))->~G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*) (soff))->~G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator */
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator;
     } else {
       p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(libp->para[0].ref ? *(const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer*) libp->para[0].ref : *(const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(libp->para[0].ref ? *(const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer*) libp->para[0].ref : *(const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer*) (void*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::reference obj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::reference obj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator[](*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator+=(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator+(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator& obj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator-=(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator-(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer& obj = ((const vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* pobj;
         vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator xobj = ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) G__getstructoffset())->operator=(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) libp->para[0].ref);
         pobj = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator(*(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator;
static int G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) (soff+(sizeof(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator)*i)))->~G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*) (soff))->~G__TvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ChannelExpertQuality */

/* ModuleType */

/* TChannelSpectrumProperties */

/* SimpleMapper */

/* SpectrumPropertiesRunInfo */

/* SpectrumPropertiesRunInfo::ChannelID */

/* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > */

/* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */

/* RunComparator */

/* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > */

/* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator */

/* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > */

/* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */

/* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > */

/* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality {
 public:
  G__Sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality(): p(&G__Sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality::*p)();
};

size_t G__get_sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality()
{
  G__Sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties))) {
     TChannelSpectrumProperties *G__Lderived;
     G__Lderived=(TChannelSpectrumProperties*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ModuleLayerID",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SlotFrontendID",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SlotFrontendID,ModuleDescription>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,SimpleMapper::ModuleDescription>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,SimpleMapper::ModuleDescription,less<pair<int,int> > >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SpectrumPropertiesRunInfo::ChannelID>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),257,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<ChannelID,std::string>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,string>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,string,less<SpectrumPropertiesRunInfo::ChannelID> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<ChannelID,TChannelSpectrumProperties>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties,less<SpectrumPropertiesRunInfo::ChannelID> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&) ",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,std::pair<double,double> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<SpectrumPropertiesRunInfo::ChannelID>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_compare",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlESpectrumPropertiesRunInfocLcLChannelIDgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),257,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID> >",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TChannelSpectrumProperties>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),257,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ChannelExpertQuality */
static void G__setup_memvarChannelExpertQuality(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality));
   { ChannelExpertQuality *p; p=(ChannelExpertQuality*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(2048).Format("dead=%lluULL",(unsigned long long)ChannelExpertQuality::dead).data(),0,"/< the dead bit: 0x1");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(2048).Format("highRMS=%lluULL",(unsigned long long)ChannelExpertQuality::highRMS).data(),0,"/< the righ RMS bit: 0x2");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(2048).Format("highNoiseRate=%lluULL",(unsigned long long)ChannelExpertQuality::highNoiseRate).data(),0,"/< the high noise rate bit: 0x4");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(2048).Format("multiPeakNoise=%lluULL",(unsigned long long)ChannelExpertQuality::multiPeakNoise).data(),0,"/< the multi peak noise bit: 0x8");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,G__FastAllocString(2048).Format("zombie=%lluULL",(unsigned long long)ChannelExpertQuality::zombie).data(),0,"/< the zombie bit: 0x10;");
   }
   G__tag_memvar_reset();
}


   /* ModuleType */
static void G__setup_memvarModuleType(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType));
   { ModuleType *p; p=(ModuleType*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("AHC=%lluULL",(unsigned long long)ModuleType::AHC).data(),0,"The bit for normal HCal modules: 0x1");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("AHC8=%lluULL",(unsigned long long)ModuleType::AHC8).data(),0,"The bit for coarse HCal modules: 0x2");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("TCMT=%lluULL",(unsigned long long)ModuleType::TCMT).data(),0,"The bit for the tail catcher: 0x4");
   }
   G__tag_memvar_reset();
}


   /* TChannelSpectrumProperties */
static void G__setup_memvarTChannelSpectrumProperties(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties));
   { TChannelSpectrumProperties *p; p=(TChannelSpectrumProperties*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_module)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_module=",0,"/< The readout module");
   G__memvar_setup((void*)((long)(&p->_chip)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_chip=",0,"/< The chip ID on this module");
   G__memvar_setup((void*)((long)(&p->_channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_channel=",0,"/< The channel ID within the chip");
   G__memvar_setup((void*)((long)(&p->_mean)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"_mean=",0,"/< The mean value of the spectrum");
   G__memvar_setup((void*)((long)(&p->_rms)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"_rms=",0,"/< The rms of the spectrum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SimpleMapper */
static void G__setup_memvarSimpleMapper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   { SimpleMapper *p; p=(SimpleMapper*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_sf2mlMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR),G__defined_typename("map<SlotFrontendID,ModuleDescription>"),-1,1,"_sf2mlMap=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SpectrumPropertiesRunInfo */
static void G__setup_memvarSpectrumPropertiesRunInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo));
   { SpectrumPropertiesRunInfo *p; p=(SpectrumPropertiesRunInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_runNumber=",0,"< The run  number of this run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TFile),-1,-1,2,"_runFile=",0,"< The file with the histograms per channel for one run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper),-1,-1,2,"_simpleMapper=",0,"< The instance of the SimpleMapper object.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TTree),-1,-1,2,"_spectrumPropertiesTree=",0,"< The internal pointer to the channel properties tree;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),-1,-1,2,"_channelSpectrumProperties=",0,"< The data object for the tree.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR),G__defined_typename("map<ChannelID,std::string>"),-1,2,"_histogramTitleMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR),G__defined_typename("map<ChannelID,TChannelSpectrumProperties>"),-1,2,"_channelSpectrumPropertiesMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"_nChannelsPerChip=",0,"< The number of channels per chip.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"_nChipsPerModule=",0,"<< The number of chips per readout module.");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"createdTree=",0,"flag to remember if the constructor created the tree (needed in destructor)");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"_moduleTypeMask=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SpectrumPropertiesRunInfo::ChannelID */
static void G__setup_memvarSpectrumPropertiesRunInfocLcLChannelID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID));
   { SpectrumPropertiesRunInfo::ChannelID *p; p=(SpectrumPropertiesRunInfo::ChannelID*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_module)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_module=",0,"/< Module I");
   G__memvar_setup((void*)((long)(&p->_chip)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_chip=",0,"/< Chip ID within the module");
   G__memvar_setup((void*)((long)(&p->_channel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"_channel=",0,"/< Channel number on the chip");
   }
   G__tag_memvar_reset();
}


   /* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
static void G__setup_memvarvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   { vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > *p; p=(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
static void G__setup_memvarvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   { vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator *p; p=(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* RunComparator */
static void G__setup_memvarRunComparator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator));
   { RunComparator *p; p=(RunComparator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,1,1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo),-1,-1,2,"_firstRunInfo=",0,"/< pointer to the first SpectrumPropertiesRunInfo");
   G__memvar_setup((void*)0,117,1,1,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo),-1,-1,2,"_secondRunInfo=",0,"/< pointer to the first SpectrumPropertiesRunInfo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TGraph),-1,-1,2,"_theGraph=",0,"/< The internal instance of the graph");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D),-1,-1,2,"_xAxisHisto=",0,"/< The internal instance of the x axis histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D),-1,-1,2,"_yAxisHisto=",0,"/< The internal instance of the y axis histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR),G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,std::pair<double,double> >"),-1,2,"_channelValuesMap=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > */
static void G__setup_memvarmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   { map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > *p; p=(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator */
static void G__setup_memvarmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator));
   { map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator *p; p=(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
static void G__setup_memvarsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   { set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > *p; p=(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
static void G__setup_memvarsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   { set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator *p; p=(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > */
static void G__setup_memvarvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   { vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > *p; p=(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator */
static void G__setup_memvarvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   { vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator *p; p=(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncChannelExpertQuality(void) {
   /* ChannelExpertQuality */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality));
   // automatic default constructor
   G__memfunc_setup("ChannelExpertQuality", 2074, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_1, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ChannelExpertQuality", 2074, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_2, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality), -1, 0, 1, 1, 1, 0, "u 'ChannelExpertQuality' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ChannelExpertQuality", 2200, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_168_0_4, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality), -1, 1, 1, 1, 1, 0, "u 'ChannelExpertQuality' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncModuleType(void) {
   /* ModuleType */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType));
   // automatic default constructor
   G__memfunc_setup("ModuleType", 1032, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_1, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ModuleType", 1032, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_2, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType), -1, 0, 1, 1, 1, 0, "u 'ModuleType' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ModuleType", 1158, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_169_0_4, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType), -1, 1, 1, 1, 1, 0, "u 'ModuleType' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTChannelSpectrumProperties(void) {
   /* TChannelSpectrumProperties */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties));
   G__memfunc_setup("TChannelSpectrumProperties",2701,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 '-1' module i - 'Int_t' 0 '-1' chip "
"i - 'Int_t' 0 '-1' channel d - 'Double_t' 0 '0' mean "
"d - 'Double_t' 0 '0' rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - module i - 'Int_t' 0 - chip "
"i - 'Int_t' 0 - channel d - 'Double_t' 0 - mean "
"d - 'Double_t' 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_3, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TChannelSpectrumProperties::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannelSpectrumProperties::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TChannelSpectrumProperties::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TChannelSpectrumProperties::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannelSpectrumProperties::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TChannelSpectrumProperties::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TChannelSpectrumProperties::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TChannelSpectrumProperties::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TChannelSpectrumProperties", 2701, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_15, (int) ('i'), 
G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 0, 1, 1, 1, 0, "u 'TChannelSpectrumProperties' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TChannelSpectrumProperties", 2827, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_170_0_17, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 1, 1, 1, 1, 0, "u 'TChannelSpectrumProperties' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSimpleMapper(void) {
   /* SimpleMapper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper));
   G__memfunc_setup("SimpleMapper",1231,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - configFileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleLayerID",1584,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_2, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR), G__defined_typename("SimpleMapper::ModuleLayerID"), 0, 1, 1, 1, 0, "u 'pair<int,int>' 'SimpleMapper::SlotFrontendID' 0 - sfID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isAHC8",480,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "u 'pair<int,int>' 'SimpleMapper::SlotFrontendID' 0 - sfID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTCMT",532,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "u 'pair<int,int>' 'SimpleMapper::SlotFrontendID' 0 - sfID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleType",1352,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_6, 104, -1, -1, 0, 1, 1, 1, 0, "u 'pair<int,int>' 'SimpleMapper::SlotFrontendID' 0 - sfID", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SimpleMapper", 1231, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_7, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper), -1, 0, 1, 1, 1, 0, "u 'SimpleMapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SimpleMapper", 1357, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_557_0_9, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper), -1, 1, 1, 1, 1, 0, "u 'SimpleMapper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSpectrumPropertiesRunInfo(void) {
   /* SpectrumPropertiesRunInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo));
   G__memfunc_setup("SpectrumPropertiesRunInfo",2625,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - runNumber u 'string' - 0 '\"\"' AHCConfigFileName "
"g - - 0 'false' apply5RMSCut u 'string' - 0 '\"\"' runFileName "
"h - - 0 'ModuleType::AHC|ModuleType::AHC8' moduleTypes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SpectrumPropertiesRunInfo",2625,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runNumber U 'TTree' - 0 - spectrumPropertiesTree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpectrumPropertiesTree",2640,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_3, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 '\"\"' fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoisyChannels",1662,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID>"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - noisyCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelsWithRMSCut",2086,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID>"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '0' lowerCut d - 'Double_t' 0 'DBL_MAX' upperCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelsWithMeanCut",2229,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID>"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 '-DBL_MAX' lowerCut d - 'Double_t' 0 'DBL_MAX' upperCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printChannels",1369,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >' 'vector<SpectrumPropertiesRunInfo::ChannelID>' 41 - listOfChannels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelHisto",1536,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_9, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 0 - channelID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelHisto",1536,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_10, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - module i - 'Int_t' 0 - chip "
"i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelHisto",1536,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_11, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - globalChannelNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGlobalChannelNumber",2227,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 41 - channelID", (char*)NULL, (void*) G__func2void( (Int_t (*)(SpectrumPropertiesRunInfo::ChannelID const&))(&SpectrumPropertiesRunInfo::getGlobalChannelNumber) ), 0);
   G__memfunc_setup("getChannelID",1158,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - globalChannelNumber", (char*)NULL, (void*) G__func2void( (SpectrumPropertiesRunInfo::ChannelID (*)(Int_t))(&SpectrumPropertiesRunInfo::getChannelID) ), 0);
   G__memfunc_setup("setNChipsPerModule",1822,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_14, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - nChipsPerModule", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&SpectrumPropertiesRunInfo::setNChipsPerModule) ), 0);
   G__memfunc_setup("setNChannelsPerChip",1905,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_15, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - nChannelsPerChip", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&SpectrumPropertiesRunInfo::setNChannelsPerChip) ), 0);
   G__memfunc_setup("getNChannelsPerChip",1893,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&SpectrumPropertiesRunInfo::getNChannelsPerChip) ), 0);
   G__memfunc_setup("getNChipsPerModule",1810,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&SpectrumPropertiesRunInfo::getNChipsPerModule) ), 0);
   G__memfunc_setup("getChannelSpectrumProperties",2937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_18, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 41 - channelID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelSpectrumProperties",2937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_19, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - globalChannelNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpectrumPropertiesTreeObject",3239,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_20, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 2, 0, 1, 1, 5, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawGetDeadChannelsPlot",2311,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_21, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_THStack), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '20.5' deadCut d - 'Double_t' 0 '70.' xAxisMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunNumber",1246,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openRunFile",1127,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "u 'string' - 0 - runFileName", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SpectrumPropertiesRunInfo", 2625, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_24, (int) ('i'), 
G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SpectrumPropertiesRunInfo", 2751, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_568_0_26, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo), -1, 1, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSpectrumPropertiesRunInfocLcLChannelID(void) {
   /* SpectrumPropertiesRunInfo::ChannelID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID));
   G__memfunc_setup("ChannelID",838,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '-1' module i - 'Int_t' 0 '-1' chip "
"i - 'Int_t' 0 '-1' channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 41 - right", "< operator for map", (void*) NULL, 0);
   G__memfunc_setup("print",557,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' myOutStream", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ChannelID", 838, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_4, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ChannelID", 964, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_569_0_6, (int) ('u'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 1, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR(void) {
   /* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__memfunc_setup("at",213,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_1, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_2, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_7, 107, -1, G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_8, 107, -1, G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - sz u 'SpectrumPropertiesRunInfo::ChannelID' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_11, 107, -1, G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_14, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >",9098,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_15, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >",9098,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_16, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n u 'SpectrumPropertiesRunInfo::ChannelID' - 11 'SpectrumPropertiesRunInfo::ChannelID()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >",9098,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_17, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >",9098,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_18, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator' 10 - first u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_19, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_21, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_22, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_25, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator' 10 - first "
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position k - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type' 0 - n "
"u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - first u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >", 9224, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_571_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void) {
   /* vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'SpectrumPropertiesRunInfo::ChannelID' 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_4, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_10, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_11, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_12, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_14, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_15, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_16, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_572_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRunComparator(void) {
   /* RunComparator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator));
   G__memfunc_setup("RunComparator",1357,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator), -1, 0, 2, 1, 1, 0, 
"u 'SpectrumPropertiesRunInfo' - 41 - firstRunInfo u 'SpectrumPropertiesRunInfo' - 41 - secondRunInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prepareGraph",1249,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&) ' 0 - calculatorFunction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prepareGraph",1249,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"1 - 'std::pair<double,double>(*) (TChannelSpectrumProperties const&,TChannelSpectrumProperties const&)' 0 - calculatorFunction u 'vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >' 'vector<SpectrumPropertiesRunInfo::ChannelID>' 41 - channelList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateChannelAndPedestalCorrectedMean",4040,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR), -1, 0, 2, 3, 1, 0, 
"u 'TChannelSpectrumProperties' - 41 - spectrumPropertiesPMNoise u 'TChannelSpectrumProperties' - 41 - spectrumPropertiesOther", (char*)NULL, (void*) G__func2void( (pair<double,double> (*)(TChannelSpectrumProperties const&, TChannelSpectrumProperties const&))(&RunComparator::calculateChannelAndPedestalCorrectedMean) ), 0);
   G__memfunc_setup("getGraph",818,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_5, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXAxisHisto",1332,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_6, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYAxisHisto",1333,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_7, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelValuesMap",1927,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,std::pair<double,double> >"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelsWithCut",1844,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID>"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 '-DBL_MAX' yMin d - 'Double_t' 0 'DBL_MAX' yMax "
"d - 'Double_t' 0 '-DBL_MAX' xMin d - 'Double_t' 0 'DBL_MAX' xMax", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RunComparator", 1357, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_10, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator), -1, 0, 1, 1, 1, 0, "u 'RunComparator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunComparator", 1483, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_648_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR(void) {
   /* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >",17954,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >",17954,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - first u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >",17954,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_3, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator' - 0 - first u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >",17954,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_4, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_11, 107, -1, G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_12, 107, -1, G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR), -1, 1, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_14, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >' 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_15, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - position u 'pair<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >' 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - first u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator' - 0 - first u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_19, 107, -1, G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::size_type"), 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - first u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_23, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_24, 107, -1, G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::size_type"), 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_25, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_26, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >", 18080, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_651_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator(void) {
   /* map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR), G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_5, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR), G__defined_typename("map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_653_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR(void) {
   /* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR));
   G__memfunc_setup("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >",12955,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >",12955,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR), -1, 1, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_9, 107, -1, G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_10, 107, -1, G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_11, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_12, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - first u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_17, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_18, 107, -1, G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::size_type"), 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_19, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_20, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "u 'SpectrumPropertiesRunInfo::ChannelID' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >", 13081, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_656_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator(void) {
   /* set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_5, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID), G__defined_typename("set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::value_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_657_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR(void) {
   /* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR));
   G__memfunc_setup("at",213,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_1, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_2, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_4, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_7, 107, -1, G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_8, 107, -1, G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - sz u 'TChannelSpectrumProperties' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_11, 107, -1, G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_14, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >",7342,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_15, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >",7342,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_16, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n u 'TChannelSpectrumProperties' - 11 'TChannelSpectrumProperties()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >",7342,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_17, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >",7342,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_18, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator' 10 - first u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_19, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_21, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_22, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TChannelSpectrumProperties' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_25, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - position u 'TChannelSpectrumProperties' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - position u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator' 10 - first "
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - position k - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::size_type' 0 - n "
"u 'TChannelSpectrumProperties' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - first u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >", 7468, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_661_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator(void) {
   /* vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_1, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_2, 105, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'TChannelSpectrumProperties' 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_3, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_4, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_5, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_6, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_7, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_8, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_9, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_10, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_11, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_12, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_13, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_14, 85, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties), G__defined_typename("vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_15, 117, G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_16, (int) ('i'), G__get_linked_tagnum(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality_662_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_string = { "string" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality = { "ChannelExpertQuality" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType = { "ModuleType" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties = { "TChannelSpectrumProperties" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_THStack = { "THStack" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper = { "SimpleMapper" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR = { "map<pair<int,int>,SimpleMapper::ModuleDescription,less<pair<int,int> >,allocator<pair<const pair<int,int>,SimpleMapper::ModuleDescription> > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo = { "SpectrumPropertiesRunInfo" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID = { "SpectrumPropertiesRunInfo::ChannelID" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlESpectrumPropertiesRunInfocLcLChannelIDgR = { "allocator<SpectrumPropertiesRunInfo::ChannelID>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR = { "vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator = { "vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator>" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR = { "less<SpectrumPropertiesRunInfo::ChannelID>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR = { "map<SpectrumPropertiesRunInfo::ChannelID,string,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,string> > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR = { "map<SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,TChannelSpectrumProperties> > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator = { "RunComparator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgR = { "allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR = { "map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR = { "pair<SpectrumPropertiesRunInfo::ChannelID,pair<double,double> >" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator = { "map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator = { "map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR = { "set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator = { "set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator = { "set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorcOboolgR = { "pair<set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR = { "vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator = { "vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator" , 99 , -1 };
G__linked_taginfo G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TBuffer.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TMemberInspector.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TObject.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_string.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TTree.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TFile.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEfloatgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEdoublegR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_THStack.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlESpectrumPropertiesRunInfocLcLChannelIDgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TGraph.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator.tagnum = -1 ;
  G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TClass);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TBuffer);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TObject);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_string);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ChannelExpertQuality),sizeof(ChannelExpertQuality),-1,262144,(char*)NULL,G__setup_memvarChannelExpertQuality,G__setup_memfuncChannelExpertQuality);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_ModuleType),sizeof(ModuleType),-1,262144,(char*)NULL,G__setup_memvarModuleType,G__setup_memfuncModuleType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TChannelSpectrumProperties),sizeof(TChannelSpectrumProperties),-1,291072,(char*)NULL,G__setup_memvarTChannelSpectrumProperties,G__setup_memfuncTChannelSpectrumProperties);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TTree);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TFile);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEintcOintgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TH1D);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_THStack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SimpleMapper),sizeof(SimpleMapper),-1,294912,(char*)NULL,G__setup_memvarSimpleMapper,G__setup_memfuncSimpleMapper);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplEpairlEintcOintgRcOSimpleMappercLcLModuleDescriptioncOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOSimpleMappercLcLModuleDescriptiongRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfo),sizeof(SpectrumPropertiesRunInfo),-1,295936,(char*)NULL,G__setup_memvarSpectrumPropertiesRunInfo,G__setup_memfuncSpectrumPropertiesRunInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_SpectrumPropertiesRunInfocLcLChannelID),sizeof(SpectrumPropertiesRunInfo::ChannelID),-1,262400,(char*)NULL,G__setup_memvarSpectrumPropertiesRunInfocLcLChannelID,G__setup_memfuncSpectrumPropertiesRunInfocLcLChannelID);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlESpectrumPropertiesRunInfocLcLChannelIDgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR),sizeof(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR,G__setup_memfuncvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator),sizeof(vector<SpectrumPropertiesRunInfo::ChannelID,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator),-1,297216,(char*)NULL,G__setup_memvarvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator,G__setup_memfuncvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlESpectrumPropertiesRunInfocLcLChannelIDcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_lesslESpectrumPropertiesRunInfocLcLChannelIDgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOstringcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiescOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOTChannelSpectrumPropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_RunComparator),sizeof(RunComparator),-1,295936,(char*)NULL,G__setup_memvarRunComparator,G__setup_memfuncRunComparator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_allocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR),sizeof(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >),-1,298752,(char*)NULL,G__setup_memvarmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR,G__setup_memfuncmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator),sizeof(map<SpectrumPropertiesRunInfo::ChannelID,pair<double,double>,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<pair<const SpectrumPropertiesRunInfo::ChannelID,pair<double,double> > > >::iterator),-1,264960,(char*)NULL,G__setup_memvarmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator,G__setup_memfuncmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_maplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEmaplESpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlEpairlEconstsPSpectrumPropertiesRunInfocLcLChannelIDcOpairlEdoublecOdoublegRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR),sizeof(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >),-1,265984,(char*)NULL,G__setup_memvarsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR,G__setup_memfuncsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator),sizeof(set<SpectrumPropertiesRunInfo::ChannelID,less<SpectrumPropertiesRunInfo::ChannelID>,allocator<SpectrumPropertiesRunInfo::ChannelID> >::iterator),-1,264960,(char*)NULL,G__setup_memvarsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator,G__setup_memfuncsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_setlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_pairlEsetlESpectrumPropertiesRunInfocLcLChannelIDcOlesslESpectrumPropertiesRunInfocLcLChannelIDgRcOallocatorlESpectrumPropertiesRunInfocLcLChannelIDgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR),sizeof(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR,G__setup_memfuncvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_vectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator),sizeof(vector<TChannelSpectrumProperties,allocator<TChannelSpectrumProperties> >::iterator),-1,297216,(char*)NULL,G__setup_memvarvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator,G__setup_memfuncvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQualityLN_reverse_iteratorlEvectorlETChannelSpectrumPropertiescOallocatorlETChannelSpectrumPropertiesgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setup_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality(void) {
  G__check_setup_version(30051515,"G__cpp_setup_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality()");
  G__set_cpp_environment_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();
  G__cpp_setup_tagtable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

  G__cpp_setup_inheritance_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

  G__cpp_setup_typetable_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

  G__cpp_setup_memvar_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

  G__cpp_setup_memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();
  G__cpp_setup_global_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();
  G__cpp_setup_func_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality();
  return;
}
class G__cpp_setup_init_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality {
  public:
    G__cpp_setup_init_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() { G__add_setup_func("_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality",(G__incsetup)(&G__cpp_setup_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality)); G__call_setup_funcs(); }
   ~G__cpp_setup_init_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality() { G__remove_setup_func("_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality"); }
};
G__cpp_setup_init_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality G__cpp_setup_initializer_afs_desydOde_user_t_torimart_work_CosmiTestLCIO_calice_calib_deadAndNoisyTools_src_ChannelExpertQuality;

